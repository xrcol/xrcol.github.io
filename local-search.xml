<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>filter</title>
    <link href="/2023/02/20/Java-Web-%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/filter/"/>
    <url>/2023/02/20/Java-Web-%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/filter/</url>
    
    <content type="html"><![CDATA[<h2 id="Filter使用方式和场景"><a href="#Filter使用方式和场景" class="headerlink" title="Filter使用方式和场景"></a>Filter使用方式和场景</h2><h3 id="主要接口"><a href="#主要接口" class="headerlink" title="主要接口"></a>主要接口</h3><p>Filter: 开发过滤器需要实现该接口，实现init、doFilter和destroy方法</p><p>FilterCofig: 在过滤器初始化时，传递信息，调用getInitParameter(name)获取参数的值</p><p>FilterChain: 调用过滤器链中的下一个过滤器，如果是最后一个，则调用servlet的service方法</p><h3 id="过滤器的部署"><a href="#过滤器的部署" class="headerlink" title="过滤器的部署"></a>过滤器的部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 或者直接指定servlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- request、include、forward、error --&gt;</span><br>    <span class="hljs-comment">&lt;!--request: 不是requestdispatcher的include和forward时，才触发 --&gt;</span><br>    <span class="hljs-comment">&lt;!--include: requestdispatcher.include调用时，才触发 --&gt;</span><br>    <span class="hljs-comment">&lt;!--forward: requestdispatcher.forward调用时，才触发 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dispatcher</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dispatcher</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        chain.doFilter(request, response);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><h4 id="对请求和响应数据进行替换"><a href="#对请求和响应数据进行替换" class="headerlink" title="对请求和响应数据进行替换"></a>对请求和响应数据进行替换</h4><p>通过继承HttpServletRequestWrapper，定义自己的request，并覆盖其中的方法，来实现需要的逻辑，在chain.doFilter时，传递自定义的Request对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> MyRequestWrapper <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRequestWrapper</span> <span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-built_in">super</span>(request);<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getQueryString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc=123&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">originQueryString</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getQueryString();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != originQueryString) &#123;<br>            originQueryString += <span class="hljs-string">&quot;&amp;&quot;</span> + str;<br>            <span class="hljs-keyword">return</span> originQueryString;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要获取response中的数据，需要自定义response，并且使用ByteArrayOutputStream，让数据写到字节数组中，同时重写HttpServletResponse类的getWriter和getOutputStream方法，返回ByteArrayOutputStream的PrintWriter和ServletOutputStream对象</p><h4 id="其它应用场景"><a href="#其它应用场景" class="headerlink" title="其它应用场景"></a>其它应用场景</h4><p>对用户请求统一认证</p><p>对响应内容压缩，减少传输量</p><p>转换图像格式</p>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/20/hello-world/"/>
    <url>/2023/02/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>集合引用类型</title>
    <link href="/2023/02/18/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/chapter-six/"/>
    <url>/2023/02/18/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/chapter-six/</url>
    
    <content type="html"><![CDATA[<h2 id="第六章-集合引用类型"><a href="#第六章-集合引用类型" class="headerlink" title="第六章 集合引用类型"></a>第六章 集合引用类型</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><p>通过new 方法创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>Array.from将可迭代结构或者存在length属性和可索引元素的结构转为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a)<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a, <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-number">2</span>) <span class="hljs-comment">// 第二个参数增强新数组</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a, <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-variable language_">this</span>.<span class="hljs-property">exponent</span>, &#123;<span class="hljs-attr">exponent</span>: <span class="hljs-number">2</span>&#125;) <span class="hljs-comment">// 第三个参数指定this的值</span><br></code></pre></td></tr></table></figure><p>Array.of将一组参数组合为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h3 id="判断是否是数组"><a href="#判断是否是数组" class="headerlink" title="判断是否是数组"></a>判断是否是数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)<br></code></pre></td></tr></table></figure><h3 id="数组迭代器"><a href="#数组迭代器" class="headerlink" title="数组迭代器"></a>数组迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a  = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;baz&quot;</span>)<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">keys</span>()) <span class="hljs-comment">// [0, 1, 2]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">values</span>()) <span class="hljs-comment">// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">entries</span>()) <span class="hljs-comment">// [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;]]</span><br></code></pre></td></tr></table></figure><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>使用Symbol.isConcatSpreadable&#x3D;false，来使concat不会打平数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> alpha = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">const</span> numeric = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> alphaNumeric = alpha.<span class="hljs-title function_">concat</span>(numeric);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alphaNumeric);<br><span class="hljs-comment">// Expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span><br><br>numeric[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] = <span class="hljs-literal">false</span>;<br>alphaNumeric = alpha.<span class="hljs-title function_">concat</span>(numeric);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alphaNumeric);<br><span class="hljs-comment">// Expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, [1, 2, 3]]</span><br></code></pre></td></tr></table></figure><p>slice方法，创建一个包含原数组元素的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">slice</span>(start, end) <span class="hljs-comment">// 参数为负值，则其实际的值为数组长度加上负值</span><br><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>nums.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>) =&gt; nums.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) =&gt; [ <span class="hljs-number">2</span> ]<br></code></pre></td></tr></table></figure><p>splice方法，对原数组进行添加&#x2F;删除元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">splice</span>(start, deleteCount, insertElement)<br><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>nums.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// nums: [3, 4, 5]</span><br>nums.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>) <span class="hljs-comment">// nums: [6, 7, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>every(): 对数组每一项都运行传入的函数，如果每一行函数返回true，则这个方法返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: false</span><br></code></pre></td></tr></table></figure><p>filter(): 对数组每一项运行传入的函数，函数返回为true的项会组成新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: [3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p>map(): 对数组每一项运行传入的函数，返回由每次函数调用结果组成的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item * <span class="hljs-number">2</span>) <span class="hljs-comment">// res: [3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p>some(): 对数组每一项运行传入的函数，如果有一项函数返回true，则这个方法返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: true</span><br></code></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="基础方法"><a href="#基础方法" class="headerlink" title="基础方法"></a>基础方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>],<br>    [<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>],<br>])<br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;key1&quot;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;key1&quot;</span>) <span class="hljs-comment">// value1</span><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>)<br>map.<span class="hljs-title function_">size</span>() <span class="hljs-comment">// 2</span><br>map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;key1&quot;</span>)<br>map.<span class="hljs-title function_">clear</span>()<br><span class="hljs-comment">// 迭代</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> pair <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">entries</span>()) &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">keys</span>()) &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">values</span>()) &#123;&#125;<br>[...map] <span class="hljs-comment">// [[&quot;key1&quot;, &quot;value1&quot;], [&quot;key2&quot;, &quot;value2&quot;]]</span><br></code></pre></td></tr></table></figure><h4 id="Map和Object区别"><a href="#Map和Object区别" class="headerlink" title="Map和Object区别"></a>Map和Object区别</h4><ul><li>内存占用，固定大小内存，Map大约可以比Object多存储50%的键值对</li><li>插入性能，消耗大致相当，不过Map在浏览器中会稍微快一点</li><li>查找速度，当把Object当作数组使用（连续整数作为属性），浏览器会进行优化，查找速度会快一点</li><li>删除性能，使用Map</li></ul><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>弱映射中的键只能是object或者继承object的类型，弱映射不会阻止垃圾回收程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> wm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>()<br><span class="hljs-keyword">const</span> key1 = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">const</span> key2 = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>&#125;<br>wm.<span class="hljs-title function_">has</span>(key1) <span class="hljs-comment">// false</span><br>wm.<span class="hljs-title function_">get</span>(key1) <span class="hljs-comment">// undefined</span><br>wm.<span class="hljs-title function_">set</span>(key1, <span class="hljs-string">&quot;test&quot;</span>)<br>wm.<span class="hljs-title function_">delete</span>(key1)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>session-track</title>
    <link href="/2023/02/18/Java-Web-%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/session-track/"/>
    <url>/2023/02/18/Java-Web-%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/session-track/</url>
    
    <content type="html"><![CDATA[<h2 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><p>保存到浏览器内存中，关闭浏览器后，下次访问时，又会创建新的session和sessionId</p><h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><p>保存到硬盘中，通过Cookie.setMaxAge(num),num为正数</p><h4 id="禁用Cookie"><a href="#禁用Cookie" class="headerlink" title="禁用Cookie"></a>禁用Cookie</h4><p>当客户端禁用Cookie后，可以通过URL重写机制来跟踪用户会话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将sessionID作为请求的一部分</span><br>response.encodeURL(path)<br>response.encodeRedirectURL(path)<br></code></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;userinfo&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>cookie.setMaxAge(<span class="hljs-number">1800</span>);<br>response.addCookie(cookie);<br>Cookie[] cookies = request.getCookies();<br></code></pre></td></tr></table></figure><h4 id="配置session默认超时时间"><a href="#配置session默认超时时间" class="headerlink" title="配置session默认超时时间"></a>配置session默认超时时间</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在tomcat中的web.xml配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HttpSessionBindingListener"><a href="#HttpSessionBindingListener" class="headerlink" title="HttpSessionBindingListener"></a>HttpSessionBindingListener</h3><p>当一个对象实现了HttpSessionBindingListener接口，当这个对象被绑定到Session中或者从Session中删除时，Servlet容器会通知这个对象，对象收到通知后，可以做一些其它的操作（在线人数统计）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionBindingListener</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueBound</span><span class="hljs-params">(HttpSessionBindingListener event)</span> &#123;<br>        <span class="hljs-comment">// 添加到Session中时</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueUnbound</span><span class="hljs-params">(HttpSessionBindingListener event)</span> &#123;<br>        <span class="hljs-comment">// 从Session中删除时</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>servlet-basic</title>
    <link href="/2023/02/09/Java-Web-%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/servlet-basic/"/>
    <url>/2023/02/09/Java-Web-%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/servlet-basic/</url>
    
    <content type="html"><![CDATA[<h2 id="Java-Web-基础😀"><a href="#Java-Web-基础😀" class="headerlink" title="Java-Web-基础😀"></a>Java-Web-基础😀</h2><h3 id="部署Java程序到Tomcat"><a href="#部署Java程序到Tomcat" class="headerlink" title="部署Java程序到Tomcat"></a>部署Java程序到Tomcat</h3><h4 id="静态部署🎈"><a href="#静态部署🎈" class="headerlink" title="静态部署🎈"></a>静态部署🎈</h4><p>直接将编译后的项目文件夹或者war包放到webapps中</p><h4 id="动态部署🎈"><a href="#动态部署🎈" class="headerlink" title="动态部署🎈"></a>动态部署🎈</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/test&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;project path&quot;</span> <span class="hljs-attr">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>直接将这插入到server.xml中host节点中</li><li>%tomcat_home%&#x2F;conf&#x2F;enginename&#x2F;hostname&#x2F;，在这创建对应项目名的project-name.xml，并将上面内容拷贝到xml中(⚠️项目的上下文路径将以project-name为准，与Context节点的path无关)</li></ul><h3 id="Servlet请求匹配规则"><a href="#Servlet请求匹配规则" class="headerlink" title="Servlet请求匹配规则"></a>Servlet请求匹配规则</h3><p>采用最长匹配，如果没有找到匹配的则调用容器默认的servlet处理，没有配置默认的servlet，则发送HTTP404消息</p><h3 id="线程安全的Servlet"><a href="#线程安全的Servlet" class="headerlink" title="线程安全的Servlet"></a>线程安全的Servlet</h3><p>默认情况下，servlet是多线程的，即一个servlet实例在多个线程中同时执行，并发地处理多个客户端请求</p><center>多线程的servlet执行模型</center><pre><code class=" mermaid">flowchart LR    subgraph se [servlet容器]        direction LR        sq[调度者线程]--&gt; ci((工作者线程池))        ci--&quot;service()&quot;--&gt; ro1(ServletA的实例)        ci--&quot;service()&quot;--&gt; ro2(ServletB的实例)        ci--&quot;service()&quot;--&gt; ro3(ServletC的实例)    end    客户端请求 --&gt; se</code></pre><h4 id="变量的线程安全"><a href="#变量的线程安全" class="headerlink" title="变量的线程安全"></a>变量的线程安全</h4><p>对于实例变量的访问，需要考虑并发的情况，同时对于connection在close()后，将其设置为null，避免在Connection Closed Exception</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TestServlet <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(req, res)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = ds.getConnection();<br>            conn.close();<br>            conn = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 确保不会关闭两次,避免并发时出现问题</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="属性的线程安全"><a href="#属性的线程安全" class="headerlink" title="属性的线程安全"></a>属性的线程安全</h4><ul><li>ServletContext: 可以被Web应用程序中所有servlet访问，线程不安全</li><li>HttpSession: 同属于一个进程的浏览器窗口，这些窗口的访问请求，属于同一个session，为了处理这些请求，Servlet容器会创建多个线程处理，线程不安全</li><li>ServletRequest: Servlet对于接受到的每一个请求，都会创建一个新的ServletRequest对象，只能一个线程能访问当前的request，线程安全</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>basic</title>
    <link href="/2023/02/07/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/basic/"/>
    <url>/2023/02/07/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/basic/</url>
    
    <content type="html"><![CDATA[<h2 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h2><h3 id="let-and-const-hoisted"><a href="#let-and-const-hoisted" class="headerlink" title="let and const hoisted"></a>let and const hoisted</h3><p>变量的构造大致可以分为3个阶段：创建、初始化和赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fuction <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>x和y的声明过程：</p><ul><li>进入fn，为fn创建一个执行环境</li><li>找到环境中所有var声明的变量，创建变量名</li><li>对这些变量初始化为undefined</li><li>开始执行代码</li><li>将x设置为1，y设置为1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>x和y的声明过程：</p><ul><li>进入fn，为fn创建一个执行环境</li><li>找到环境中所有let声明的变量，创建变量名</li><li>开始执行代码</li><li>将x设置为1，这不是赋值，而是初始化（如果为let x，则将x初始化为undefined）</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>script</title>
    <link href="/2023/02/07/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/script/"/>
    <url>/2023/02/07/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/script/</url>
    
    <content type="html"><![CDATA[<h2 id="Script加载"><a href="#Script加载" class="headerlink" title="Script加载"></a>Script加载</h2><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script <span class="hljs-keyword">async</span> src=<span class="hljs-string">&#x27;test.js&#x27;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script defer src=<span class="hljs-string">&#x27;test.js&#x27;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="同步加载"><a href="#同步加载" class="headerlink" title="同步加载"></a>同步加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 设置async为false来实现同步加载</span><br><span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;test.js&#x27;</span><br>script.<span class="hljs-property">async</span> = <span class="hljs-literal">false</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script)<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">difference</th><th align="center">async</th><th align="center">defer</th></tr></thead><tbody><tr><td align="center">block page loading</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">execute by insert order</td><td align="center">no</td><td align="center">yes</td></tr><tr><td align="center">rely on the DOM</td><td align="center">no</td><td align="center">yes</td></tr></tbody></table><p> <img src="https://html.spec.whatwg.org/images/asyncdefer.svg" alt="script"></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>async</strong>下载完后立即执行，适用于要尽可能快的执行脚本</p><p><strong>defer</strong>下载完后也需要等到文档解析完执行，适用于脚本中需要操作DOM</p><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>不会执行，只是下载和缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link rel=<span class="hljs-string">&#x27;preload&#x27;</span> href=<span class="hljs-string">&#x27;test.js&#x27;</span> <span class="hljs-keyword">as</span>=<span class="hljs-string">&#x27;script&#x27;</span> /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&#x27;preload&#x27;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;test.css&#x27;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&#x27;stylesheet&#x27;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>[1] <a href="https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer/">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer/</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
