<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PriorityQueue源码解析</title>
    <link href="/2023/05/04/2aefd63fb879/"/>
    <url>/2023/05/04/2aefd63fb879/</url>
    
    <content type="html"><![CDATA[<h2 id="PriorityQueue源码解析"><a href="#PriorityQueue源码解析" class="headerlink" title="PriorityQueue源码解析"></a>PriorityQueue源码解析</h2><p>优先队列，通过堆实现，默认为小顶堆</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>用数组模拟完全二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Priority queue represented as a balanced binary heap: the two</span><br><span class="hljs-comment"> * children of queue[n] are queue[2*n+1] and queue[2*(n+1)].  The</span><br><span class="hljs-comment"> * priority queue is ordered by comparator, or by the elements&#x27;</span><br><span class="hljs-comment"> * natural ordering, if comparator is null: For each node n in the</span><br><span class="hljs-comment"> * heap and each descendant d of n, n &lt;= d.  The element with the</span><br><span class="hljs-comment"> * lowest value is in queue[0], assuming the queue is nonempty.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Object[] queue; <span class="hljs-comment">// non-private to simplify nested class access</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The number of elements in the priority queue.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The comparator, or null if priority queue uses elements&#x27;</span><br><span class="hljs-comment"> * natural ordering.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator;<br><br></code></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>默认初始容量为11，不允许存入null值，如果构造时，传入的集合中存在null值，则产生空指针报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> PriorityQueue&#125; with the default initial</span><br><span class="hljs-comment"> * capacity (11) that orders its elements according to their</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@linkplain</span> Comparable natural ordering&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>(DEFAULT_INITIAL_CAPACITY, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> PriorityQueue&#125; with the specified initial</span><br><span class="hljs-comment"> * capacity that orders its elements according to their</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@linkplain</span> Comparable natural ordering&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> initialCapacity the initial capacity for this priority queue</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if &#123;<span class="hljs-doctag">@code</span> initialCapacity&#125; is less</span><br><span class="hljs-comment"> *         than 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-built_in">this</span>(initialCapacity, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> PriorityQueue&#125; with the default initial capacity and</span><br><span class="hljs-comment"> * whose elements are ordered according to the specified comparator.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  comparator the comparator that will be used to order this</span><br><span class="hljs-comment"> *         priority queue.  If &#123;<span class="hljs-doctag">@code</span> null&#125;, the &#123;<span class="hljs-doctag">@linkplain</span> Comparable</span><br><span class="hljs-comment"> *         natural ordering&#125; of the elements will be used.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span> &#123;<br>    <span class="hljs-built_in">this</span>(DEFAULT_INITIAL_CAPACITY, comparator);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> PriorityQueue&#125; with the specified initial capacity</span><br><span class="hljs-comment"> * that orders its elements according to the specified comparator.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  initialCapacity the initial capacity for this priority queue</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  comparator the comparator that will be used to order this</span><br><span class="hljs-comment"> *         priority queue.  If &#123;<span class="hljs-doctag">@code</span> null&#125;, the &#123;<span class="hljs-doctag">@linkplain</span> Comparable</span><br><span class="hljs-comment"> *         natural ordering&#125; of the elements will be used.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if &#123;<span class="hljs-doctag">@code</span> initialCapacity&#125; is</span><br><span class="hljs-comment"> *         less than 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity,</span><br><span class="hljs-params">                     Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span> &#123;<br>    <span class="hljs-comment">// Note: This restriction of at least one is not actually needed,</span><br>    <span class="hljs-comment">// but continues for 1.5 compatibility</span><br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-built_in">this</span>.queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    <span class="hljs-built_in">this</span>.comparator = comparator;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> PriorityQueue&#125; containing the elements in the</span><br><span class="hljs-comment"> * specified collection.  If the specified collection is an instance of</span><br><span class="hljs-comment"> * a &#123;<span class="hljs-doctag">@link</span> SortedSet&#125; or is another &#123;<span class="hljs-doctag">@code</span> PriorityQueue&#125;, this</span><br><span class="hljs-comment"> * priority queue will be ordered according to the same ordering.</span><br><span class="hljs-comment"> * Otherwise, this priority queue will be ordered according to the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@linkplain</span> Comparable natural ordering&#125; of its elements.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  c the collection whose elements are to be placed</span><br><span class="hljs-comment"> *         into this priority queue</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClassCastException if elements of the specified collection</span><br><span class="hljs-comment"> *         cannot be compared to one another according to the priority</span><br><span class="hljs-comment"> *         queue&#x27;s ordering</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if the specified collection or any</span><br><span class="hljs-comment"> *         of its elements are null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    <span class="hljs-keyword">if</span> (c <span class="hljs-keyword">instanceof</span> SortedSet&lt;?&gt;) &#123;<br>        SortedSet&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span>&gt; ss = (SortedSet&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span>&gt;) c;<br>        <span class="hljs-built_in">this</span>.comparator = (Comparator&lt;? <span class="hljs-built_in">super</span> E&gt;) ss.comparator();<br>        initElementsFromCollection(ss);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c <span class="hljs-keyword">instanceof</span> PriorityQueue&lt;?&gt;) &#123;<br>        PriorityQueue&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span>&gt; pq = (PriorityQueue&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span>&gt;) c;<br>        <span class="hljs-built_in">this</span>.comparator = (Comparator&lt;? <span class="hljs-built_in">super</span> E&gt;) pq.comparator();<br>        initFromPriorityQueue(pq);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.comparator = <span class="hljs-literal">null</span>;<br>        initFromCollection(c);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> PriorityQueue&#125; containing the elements in the</span><br><span class="hljs-comment"> * specified priority queue.  This priority queue will be</span><br><span class="hljs-comment"> * ordered according to the same ordering as the given priority</span><br><span class="hljs-comment"> * queue.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  c the priority queue whose elements are to be placed</span><br><span class="hljs-comment"> *         into this priority queue</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClassCastException if elements of &#123;<span class="hljs-doctag">@code</span> c&#125; cannot be</span><br><span class="hljs-comment"> *         compared to one another according to &#123;<span class="hljs-doctag">@code</span> c&#125;&#x27;s</span><br><span class="hljs-comment"> *         ordering</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if the specified priority queue or any</span><br><span class="hljs-comment"> *         of its elements are null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(PriorityQueue&lt;? extends E&gt; c)</span> &#123;<br>    <span class="hljs-built_in">this</span>.comparator = (Comparator&lt;? <span class="hljs-built_in">super</span> E&gt;) c.comparator();<br>    initFromPriorityQueue(c);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> PriorityQueue&#125; containing the elements in the</span><br><span class="hljs-comment"> * specified sorted set.   This priority queue will be ordered</span><br><span class="hljs-comment"> * according to the same ordering as the given sorted set.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  c the sorted set whose elements are to be placed</span><br><span class="hljs-comment"> *         into this priority queue</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClassCastException if elements of the specified sorted</span><br><span class="hljs-comment"> *         set cannot be compared to one another according to the</span><br><span class="hljs-comment"> *         sorted set&#x27;s ordering</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if the specified sorted set or any</span><br><span class="hljs-comment"> *         of its elements are null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(SortedSet&lt;? extends E&gt; c)</span> &#123;<br>    <span class="hljs-built_in">this</span>.comparator = (Comparator&lt;? <span class="hljs-built_in">super</span> E&gt;) c.comparator();<br>    initElementsFromCollection(c);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="add-、offer"><a href="#add-、offer" class="headerlink" title="add()、offer()"></a>add()、offer()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Inserts the specified element into this priority queue.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; (as specified by &#123;<span class="hljs-doctag">@link</span> Collection#add&#125;)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClassCastException if the specified element cannot be</span><br><span class="hljs-comment"> *         compared with elements currently in this priority queue</span><br><span class="hljs-comment"> *         according to the priority queue&#x27;s ordering</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if the specified element is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> offer(e);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Inserts the specified element into this priority queue.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; (as specified by &#123;<span class="hljs-doctag">@link</span> Queue#offer&#125;)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClassCastException if the specified element cannot be</span><br><span class="hljs-comment"> *         compared with elements currently in this priority queue</span><br><span class="hljs-comment"> *         according to the priority queue&#x27;s ordering</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if the specified element is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    modCount++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size;<br>    <span class="hljs-keyword">if</span> (i &gt;= queue.length)<br>        grow(i + <span class="hljs-number">1</span>);<br>    size = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>        queue[<span class="hljs-number">0</span>] = e;<br>    <span class="hljs-keyword">else</span><br>        siftUp(i, e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftUp</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (comparator != <span class="hljs-literal">null</span>)<br>        siftUpUsingComparator(k, x);<br>    <span class="hljs-keyword">else</span><br>        siftUpComparable(k, x);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftUpComparable</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    Comparable&lt;? <span class="hljs-built_in">super</span> E&gt; key = (Comparable&lt;? <span class="hljs-built_in">super</span> E&gt;) x;<br>    <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (k - <span class="hljs-number">1</span>) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> queue[parent];<br>        <span class="hljs-keyword">if</span> (key.compareTo((E) e) &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        queue[k] = e;<br>        k = parent;<br>    &#125;<br>    queue[k] = key;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftUpUsingComparator</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (k - <span class="hljs-number">1</span>) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> queue[parent];<br>        <span class="hljs-keyword">if</span> (comparator.compare(x, (E) e) &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        queue[k] = e;<br>        k = parent;<br>    &#125;<br>    queue[k] = x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="peek"><a href="#peek" class="headerlink" title="peek()"></a>peek()</h3><p>获取堆顶元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (size == <span class="hljs-number">0</span>) ? <span class="hljs-literal">null</span> : (E) queue[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="remove-、poll"><a href="#remove-、poll" class="headerlink" title="remove()、poll()"></a>remove()、poll()</h3><p>删除堆顶元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> --size;<br>    modCount++;<br>    <span class="hljs-type">E</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (E) queue[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">E</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (E) queue[s];<br>    queue[s] = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        siftDown(<span class="hljs-number">0</span>, x);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (comparator != <span class="hljs-literal">null</span>)<br>        siftDownUsingComparator(k, x);<br>    <span class="hljs-keyword">else</span><br>        siftDownComparable(k, x);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDownComparable</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    Comparable&lt;? <span class="hljs-built_in">super</span> E&gt; key = (Comparable&lt;? <span class="hljs-built_in">super</span> E&gt;)x;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">half</span> <span class="hljs-operator">=</span> size &gt;&gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-comment">// loop while a non-leaf</span><br>    <span class="hljs-keyword">while</span> (k &lt; half) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> (k &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">// assume left child is least</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> queue[child];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> child + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp;<br>            ((Comparable&lt;? <span class="hljs-built_in">super</span> E&gt;) c).compareTo((E) queue[right]) &gt; <span class="hljs-number">0</span>)<br>            c = queue[child = right];<br>        <span class="hljs-keyword">if</span> (key.compareTo((E) c) &lt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        queue[k] = c;<br>        k = child;<br>    &#125;<br>    queue[k] = key;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDownUsingComparator</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">half</span> <span class="hljs-operator">=</span> size &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k &lt; half) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> (k &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> queue[child];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> child + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp;<br>            comparator.compare((E) c, (E) queue[right]) &gt; <span class="hljs-number">0</span>)<br>            c = queue[child = right];<br>        <span class="hljs-keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        queue[k] = c;<br>        k = child;<br>    &#125;<br>    queue[k] = x;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> indexOf(o);<br>    <span class="hljs-keyword">if</span> (i == -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        removeAt(i);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> E <span class="hljs-title function_">removeAt</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-comment">// assert i &gt;= 0 &amp;&amp; i &lt; size;</span><br>    modCount++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> --size;<br>    <span class="hljs-keyword">if</span> (s == i) <span class="hljs-comment">// removed last element</span><br>        queue[i] = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">moved</span> <span class="hljs-operator">=</span> (E) queue[s];<br>        queue[s] = <span class="hljs-literal">null</span>;<br>        siftDown(i, moved);<br>        <span class="hljs-keyword">if</span> (queue[i] == moved) &#123;<br>            siftUp(i, moved);<br>            <span class="hljs-keyword">if</span> (queue[i] != moved)<br>                <span class="hljs-keyword">return</span> moved;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>当前容量小于64时，每次扩容变成之前的2倍；大于64，则扩容为1.5倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Increases the capacity of the array.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minCapacity the desired minimum capacity</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> queue.length;<br>    <span class="hljs-comment">// Double size if small; else grow by 50%</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((oldCapacity &lt; <span class="hljs-number">64</span>) ?<br>                                     (oldCapacity + <span class="hljs-number">2</span>) :<br>                                     (oldCapacity &gt;&gt; <span class="hljs-number">1</span>));<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    queue = Arrays.copyOf(queue, newCapacity);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hugeCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>    <span class="hljs-keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?<br>        Integer.MAX_VALUE :<br>        MAX_ARRAY_SIZE;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrayDeque源码解析</title>
    <link href="/2023/05/03/b0ad95126342/"/>
    <url>/2023/05/03/b0ad95126342/</url>
    
    <content type="html"><![CDATA[<h2 id="ArrayDeque源码解析"><a href="#ArrayDeque源码解析" class="headerlink" title="ArrayDeque源码解析"></a>ArrayDeque源码解析</h2><p>ArrayDeque实现了Deque接口，既可以看作栈，也可以用作队列，采用循环数组实现，如果head&#x3D;&#x3D;tail，则扩容为之前的2倍</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> Object[] elements;<br><span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> head;<br><span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> tail;<br></code></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayDeque</span><span class="hljs-params">()</span> &#123;<br>    elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">16</span>];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayDeque</span><span class="hljs-params">(<span class="hljs-type">int</span> numElements)</span> &#123;<br>    allocateElements(numElements);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayDeque</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    allocateElements(c.size());<br>    addAll(c);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateSize</span><span class="hljs-params">(<span class="hljs-type">int</span> numElements)</span> &#123; <span class="hljs-comment">// 根据给定的数字，计算一个刚好比它大的2次幂</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">initialCapacity</span> <span class="hljs-operator">=</span> MIN_INITIAL_CAPACITY;<br>    <span class="hljs-comment">// Find the best power of two to hold elements.</span><br>    <span class="hljs-comment">// Tests &quot;&lt;=&quot; because arrays aren&#x27;t kept full.</span><br>    <span class="hljs-keyword">if</span> (numElements &gt;= initialCapacity) &#123;<br>        initialCapacity = numElements;<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">1</span>);<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">2</span>);<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">4</span>);<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">8</span>);<br>        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>        initialCapacity++;<br><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)   <span class="hljs-comment">// Too many elements, must back off</span><br>            initialCapacity &gt;&gt;&gt;= <span class="hljs-number">1</span>;<span class="hljs-comment">// Good luck allocating 2 ^ 30 elements</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> initialCapacity;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">allocateElements</span><span class="hljs-params">(<span class="hljs-type">int</span> numElements)</span> &#123;<br>    elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[calculateSize(numElements)];<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="addFirst-、addLast"><a href="#addFirst-、addLast" class="headerlink" title="addFirst()、addLast()"></a>addFirst()、addLast()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    elements[head = (head - <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>)] = e;<br>    <span class="hljs-keyword">if</span> (head == tail)<br>        doubleCapacity();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    elements[tail] = e;<br>    <span class="hljs-keyword">if</span> ( (tail = (tail + <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>)) == head)<br>        doubleCapacity();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doubleCapacity</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">assert</span> head == tail;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> elements.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> n - p; <span class="hljs-comment">// number of elements to the right of p</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> n &lt;&lt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (newCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Sorry, deque too big&quot;</span>);<br>    Object[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[newCapacity];<br>    System.arraycopy(elements, p, a, <span class="hljs-number">0</span>, r);<br>    System.arraycopy(elements, <span class="hljs-number">0</span>, a, r, p);<br>    elements = a;<br>    head = <span class="hljs-number">0</span>;<br>    tail = n;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="pollFirst-、pollLast"><a href="#pollFirst-、pollLast" class="headerlink" title="pollFirst()、pollLast()"></a>pollFirst()、pollLast()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-type">E</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (E) elements[h];<br>    <span class="hljs-comment">// Element is null if deque empty</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    elements[h] = <span class="hljs-literal">null</span>;     <span class="hljs-comment">// Must null out slot</span><br>    head = (h + <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> (tail - <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>);<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-type">E</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (E) elements[t];<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    elements[t] = <span class="hljs-literal">null</span>;<br>    tail = t;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="peekFirst-、peekLast"><a href="#peekFirst-、peekLast" class="headerlink" title="peekFirst()、peekLast()"></a>peekFirst()、peekLast()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// elements[head] is null if deque empty</span><br>    <span class="hljs-keyword">return</span> (E) elements[head];<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (E) elements[(tail - <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>)];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈操作"><a href="#栈操作" class="headerlink" title="栈操作"></a>栈操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> peekFirst();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E e)</span> &#123;<br>    addFirst(e);<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> removeFirst();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> offerLast(e);<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> pollFirst();<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> peekFirst();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LinkedList源码解析</title>
    <link href="/2023/05/02/799bd4db5c9f/"/>
    <url>/2023/05/02/799bd4db5c9f/</url>
    
    <content type="html"><![CDATA[<h2 id="LinkedList源码解析"><a href="#LinkedList源码解析" class="headerlink" title="LinkedList源码解析"></a>LinkedList源码解析</h2><p>LinkedList同时实现了List接口和Deque接口，既可以看作顺序容器，又可以看作队列，同时又可以看作栈</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>LinkedList通过双向链表实现，first和last分别指向链表的第一个和最后一个元素，当链表为空时，first和last都指向null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pointer to first node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; first;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pointer to last node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; last;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.item = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>        <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs a list containing the elements of the specified</span><br><span class="hljs-comment"> * collection, in the order they are returned by the collection&#x27;s</span><br><span class="hljs-comment"> * iterator.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  c the collection whose elements are to be placed into this list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if the specified collection is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    <span class="hljs-built_in">this</span>();<br>    addAll(c);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="getFrist-、getLast"><a href="#getFrist-、getLast" class="headerlink" title="getFrist()、getLast()"></a>getFrist()、getLast()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>    <span class="hljs-keyword">return</span> f.item;<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">getLast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>    <span class="hljs-keyword">return</span> l.item;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="removeFirst-、removeLast"><a href="#removeFirst-、removeLast" class="headerlink" title="removeFirst()、removeLast()"></a>removeFirst()、removeLast()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>    <span class="hljs-keyword">return</span> unlinkFirst(f);<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>    <span class="hljs-keyword">return</span> unlinkLast(l);<br>&#125;<br><br><span class="hljs-keyword">private</span> E <span class="hljs-title function_">unlinkFirst</span><span class="hljs-params">(Node&lt;E&gt; f)</span> &#123;<br>    <span class="hljs-comment">// assert f == first &amp;&amp; f != null;</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">E</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> f.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = f.next;<br>    f.item = <span class="hljs-literal">null</span>;<br>    f.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>    first = next;<br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>)<br>        last = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">else</span><br>        next.prev = <span class="hljs-literal">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br><br><span class="hljs-keyword">private</span> E <span class="hljs-title function_">unlinkLast</span><span class="hljs-params">(Node&lt;E&gt; l)</span> &#123;<br>    <span class="hljs-comment">// assert l == last &amp;&amp; l != null;</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">E</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> l.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = l.prev;<br>    l.item = <span class="hljs-literal">null</span>;<br>    l.prev = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>    last = prev;<br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>)<br>        first = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">else</span><br>        prev.next = <span class="hljs-literal">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="remove-Object-、remove-int"><a href="#remove-Object-、remove-int" class="headerlink" title="remove(Object)、remove(int)"></a>remove(Object)、remove(int)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (x.item == <span class="hljs-literal">null</span>) &#123;<br>                unlink(x);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (o.equals(x.item)) &#123;<br>                unlink(x);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>E <span class="hljs-title function_">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span> &#123;<br>    <span class="hljs-comment">// assert x != null;</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">E</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> x.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = x.next;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = x.prev;<br><br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<br>        first = next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        prev.next = next;<br>        x.prev = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>) &#123;<br>        last = prev;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        next.prev = prev;<br>        x.next = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    x.item = <span class="hljs-literal">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    checkElementIndex(index);<br>    <span class="hljs-keyword">return</span> unlink(node(index));<br>&#125;<br><br>Node&lt;E&gt; <span class="hljs-title function_">node</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// assert isElementIndex(index);</span><br><br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) &#123;<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>直接在列表的末尾添加元素，因为有last指向末尾元素，因此只需要常数时间，如果是add(int index, E element)，需要先通过线性查找到具体位置，然后完成插入操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    linkLast(e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    checkPositionIndex(index);<br><br>    <span class="hljs-keyword">if</span> (index == size)<br>        linkLast(element);<br>    <span class="hljs-keyword">else</span><br>        linkBefore(element, node(index));<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkBefore</span><span class="hljs-params">(E e, Node&lt;E&gt; succ)</span> &#123;<br>    <span class="hljs-comment">// assert succ != null;</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; pred = succ.prev;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(pred, e, succ);<br>    succ.prev = newNode;<br>    <span class="hljs-keyword">if</span> (pred == <span class="hljs-literal">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        pred.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="addAll"><a href="#addAll" class="headerlink" title="addAll()"></a>addAll()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    <span class="hljs-keyword">return</span> addAll(size, c);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(<span class="hljs-type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;<br>    checkPositionIndex(index);<br><br>    Object[] a = c.toArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numNew</span> <span class="hljs-operator">=</span> a.length;<br>    <span class="hljs-keyword">if</span> (numNew == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    Node&lt;E&gt; pred, succ;<br>    <span class="hljs-keyword">if</span> (index == size) &#123;<br>        succ = <span class="hljs-literal">null</span>;<br>        pred = last;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        succ = node(index);<br>        pred = succ.prev;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (Object o : a) &#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) o;<br>        Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(pred, e, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (pred == <span class="hljs-literal">null</span>)<br>            first = newNode;<br>        <span class="hljs-keyword">else</span><br>            pred.next = newNode;<br>        pred = newNode;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (succ == <span class="hljs-literal">null</span>) &#123;<br>        last = pred;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        pred.next = succ;<br>        succ.prev = pred;<br>    &#125;<br><br>    size += numNew;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Clearing all of the links between nodes is &quot;unnecessary&quot;, but:</span><br>    <span class="hljs-comment">// - helps a generational GC if the discarded nodes inhabit</span><br>    <span class="hljs-comment">//   more than one generation</span><br>    <span class="hljs-comment">// - is sure to free memory even if there is a reachable Iterator</span><br>    <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; ) &#123;<br>        Node&lt;E&gt; next = x.next;<br>        x.item = <span class="hljs-literal">null</span>;<br>        x.next = <span class="hljs-literal">null</span>;<br>        x.prev = <span class="hljs-literal">null</span>;<br>        x = next;<br>    &#125;<br>    first = last = <span class="hljs-literal">null</span>;<br>    size = <span class="hljs-number">0</span>;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get-int-、set-int"><a href="#get-int-、set-int" class="headerlink" title="get(int)、set(int)"></a>get(int)、set(int)</h3><p>都需要线性查找到具体的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    checkElementIndex(index);<br>    <span class="hljs-keyword">return</span> node(index).item;<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    checkElementIndex(index);<br>    Node&lt;E&gt; x = node(index);<br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldVal</span> <span class="hljs-operator">=</span> x.item;<br>    x.item = element;<br>    <span class="hljs-keyword">return</span> oldVal;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="indexOf-、lastIndexOf"><a href="#indexOf-、lastIndexOf" class="headerlink" title="indexOf()、lastIndexOf()"></a>indexOf()、lastIndexOf()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (x.item == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> index;<br>            index++;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (o.equals(x.item))<br>                <span class="hljs-keyword">return</span> index;<br>            index++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lastIndexOf</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> size;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="hljs-literal">null</span>; x = x.prev) &#123;<br>            index--;<br>            <span class="hljs-keyword">if</span> (x.item == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> index;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="hljs-literal">null</span>; x = x.prev) &#123;<br>            index--;<br>            <span class="hljs-keyword">if</span> (o.equals(x.item))<br>                <span class="hljs-keyword">return</span> index;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Queue操作"><a href="#Queue操作" class="headerlink" title="Queue操作"></a>Queue操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">return</span> (f == <span class="hljs-literal">null</span>) ? <span class="hljs-literal">null</span> : f.item;<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">return</span> (f == <span class="hljs-literal">null</span>) ? <span class="hljs-literal">null</span> : unlinkFirst(f);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> add(e);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Deque操作"><a href="#Deque操作" class="headerlink" title="Deque操作"></a>Deque操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E e)</span> &#123;<br>    addFirst(e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E e)</span> &#123;<br>    addLast(e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">return</span> (f == <span class="hljs-literal">null</span>) ? <span class="hljs-literal">null</span> : f.item;<br> &#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">return</span> (l == <span class="hljs-literal">null</span>) ? <span class="hljs-literal">null</span> : l.item;<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">return</span> (f == <span class="hljs-literal">null</span>) ? <span class="hljs-literal">null</span> : unlinkFirst(f);<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">return</span> (l == <span class="hljs-literal">null</span>) ? <span class="hljs-literal">null</span> : unlinkLast(l);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E e)</span> &#123;<br>    addFirst(e);<br>&#125;<br><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> removeFirst();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrayList源码解析</title>
    <link href="/2023/05/02/d90360dbff92/"/>
    <url>/2023/05/02/d90360dbff92/</url>
    
    <content type="html"><![CDATA[<h2 id="ArrayList源码解析"><a href="#ArrayList源码解析" class="headerlink" title="ArrayList源码解析"></a>ArrayList源码解析</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>自定义了序列化的writeObject和readObject方法，只序列化实际存在的元素，所以这里将elementData标记为transient，不需要序列化空的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The array buffer into which the elements of the ArrayList are stored.</span><br><span class="hljs-comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span><br><span class="hljs-comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="hljs-comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Object[] elementData; <span class="hljs-comment">// non-private to simplify nested class access</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The size of the ArrayList (the number of elements it contains).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@serial</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br></code></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs an empty list with the specified initial capacity.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  initialCapacity  the initial capacity of the list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span><br><span class="hljs-comment"> *         is negative</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                           initialCapacity);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs an empty list with an initial capacity of ten.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs a list containing the elements of the specified</span><br><span class="hljs-comment"> * collection, in the order they are returned by the collection&#x27;s</span><br><span class="hljs-comment"> * iterator.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> c the collection whose elements are to be placed into this list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if the specified collection is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    Object[] a = c.toArray();<br>    <span class="hljs-keyword">if</span> ((size = a.length) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (c.getClass() == ArrayList.class) &#123;<br>            elementData = a;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            elementData = Arrays.copyOf(a, size, Object[].class);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// replace with empty array.</span><br>        elementData = EMPTY_ELEMENTDATA;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h3><p>每当向数组添加元素时，都会检查添加后元素的个数是否超出当前数组的长度，如果超出，数组就会进行扩容。数据扩容也可以通过一个公开的方法**ensureCapacity(int minCapacity)**实现，在实际大量添加元素前，可以手动调用该方法实现扩容，避免后面的渐进式扩容。</p><p>数组扩容时，会将老数组的元素重新拷贝到新数组中，每次数组容量的增大是其原容量的1.5倍。扩容的代价比较高，实际使用时应尽量避免数组扩容。如果可以预知需要多少容量，可以在构造时，就指定其容量；或者根据实际需求，手动调用ensureCapacity(int minCapacity)实现扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Increases the capacity of this &#123;<span class="hljs-doctag">@code</span> ArrayList&#125; instance, if</span><br><span class="hljs-comment"> * necessary, to ensure that it can hold at least the number of elements</span><br><span class="hljs-comment"> * specified by the minimum capacity argument.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minCapacity the desired minimum capacity</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (minCapacity &gt; elementData.length<br>        &amp;&amp; !(elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA<br>             &amp;&amp; minCapacity &lt;= DEFAULT_CAPACITY)) &#123;<br>        modCount++;<br>        grow(minCapacity);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The maximum size of array to allocate (unless necessary).</span><br><span class="hljs-comment"> * Some VMs reserve some header words in an array.</span><br><span class="hljs-comment"> * Attempts to allocate larger arrays may result in</span><br><span class="hljs-comment"> * OutOfMemoryError: Requested array size exceeds VM limit</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_ARRAY_SIZE</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE - <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Increases the capacity to ensure that it can hold at least the</span><br><span class="hljs-comment"> * number of elements specified by the minimum capacity argument.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minCapacity the desired minimum capacity</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> OutOfMemoryError if minCapacity is less than zero</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Object[] grow(<span class="hljs-type">int</span> minCapacity) &#123;<br>    <span class="hljs-type">return</span> <span class="hljs-variable">elementData</span> <span class="hljs-operator">=</span> Arrays.copyOf(elementData,<br>                                       newCapacity(minCapacity));<br>&#125;<br><br><span class="hljs-keyword">private</span> Object[] grow() &#123;<br>    <span class="hljs-keyword">return</span> grow(size + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns a capacity at least as large as the given minimum capacity.</span><br><span class="hljs-comment"> * Returns the current capacity increased by 50% if that suffices.</span><br><span class="hljs-comment"> * Will not return a capacity greater than MAX_ARRAY_SIZE unless</span><br><span class="hljs-comment"> * the given minimum capacity is greater than MAX_ARRAY_SIZE.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minCapacity the desired minimum capacity</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> OutOfMemoryError if minCapacity is less than zero</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">newCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA)<br>            <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>        <span class="hljs-keyword">if</span> (minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>        <span class="hljs-keyword">return</span> minCapacity;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (newCapacity - MAX_ARRAY_SIZE &lt;= <span class="hljs-number">0</span>)<br>        ? newCapacity<br>        : hugeCapacity(minCapacity);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hugeCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>    <span class="hljs-keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE)<br>        ? Integer.MAX_VALUE<br>        : MAX_ARRAY_SIZE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="add-、addAll"><a href="#add-、addAll" class="headerlink" title="add()、addAll()"></a>add()、addAll()</h3><p>在添加元素前，需要先进行剩余空间的检查，如果超出当前数组长度，则自动扩容，调用grow方法。如果是指定位置的添加元素，则需要先检查是否超出范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This helper method split out from add(E) to keep method</span><br><span class="hljs-comment"> * bytecode size under 35 (the -XX:MaxInlineSize default value),</span><br><span class="hljs-comment"> * which helps when add(E) is called in a C1-compiled loop.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e, Object[] elementData, <span class="hljs-type">int</span> s)</span> &#123;<br>    <span class="hljs-comment">// 转为inline method，执行更快</span><br>    <span class="hljs-keyword">if</span> (s == elementData.length)<br>        elementData = grow();<br>    elementData[s] = e;<br>    size = s + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Appends the specified element to the end of this list.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> e element to be appended to this list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; (as specified by &#123;<span class="hljs-doctag">@link</span> Collection#add&#125;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    modCount++;<br>    add(e, elementData, size);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Inserts the specified element at the specified position in this</span><br><span class="hljs-comment"> * list. Shifts the element currently at that position (if any) and</span><br><span class="hljs-comment"> * any subsequent elements to the right (adds one to their indices).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> index index at which the specified element is to be inserted</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> element element to be inserted</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    rangeCheckForAdd(index);<br>    modCount++;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> s;<br>    Object[] elementData;<br>    <span class="hljs-keyword">if</span> ((s = size) == (elementData = <span class="hljs-built_in">this</span>.elementData).length)<br>        elementData = grow();<br>    System.arraycopy(elementData, index,<br>                     elementData, index + <span class="hljs-number">1</span>,<br>                     s - index);<br>    elementData[index] = element;<br>    size = s + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A version of rangeCheck used by add and addAll.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rangeCheckForAdd</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt; size || index &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    Object[] a = c.toArray();<br>    modCount++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numNew</span> <span class="hljs-operator">=</span> a.length;<br>    <span class="hljs-keyword">if</span> (numNew == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Object[] elementData;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> s;<br>    <span class="hljs-keyword">if</span> (numNew &gt; (elementData = <span class="hljs-built_in">this</span>.elementData).length - (s = size))<br>        elementData = grow(s + numNew);<br>    System.arraycopy(a, <span class="hljs-number">0</span>, elementData, s, numNew);<br>    size = s + numNew;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(<span class="hljs-type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;<br>    rangeCheckForAdd(index);<br><br>    Object[] a = c.toArray();<br>    modCount++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numNew</span> <span class="hljs-operator">=</span> a.length;<br>    <span class="hljs-keyword">if</span> (numNew == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Object[] elementData;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> s;<br>    <span class="hljs-keyword">if</span> (numNew &gt; (elementData = <span class="hljs-built_in">this</span>.elementData).length - (s = size))<br>        elementData = grow(s + numNew);<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> s - index;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        System.arraycopy(elementData, index,<br>                         elementData, index + numNew,<br>                         numMoved);<br>    System.arraycopy(a, <span class="hljs-number">0</span>, elementData, index, numNew);<br>    size = s + numNew;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><p>先检查下标范围，之后直接对指定位置赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    Objects.checkIndex(index, size);<br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br>    elementData[index] = element;<br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>先检查下标范围，获取对应位置的元素后，进行类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">E <span class="hljs-title function_">elementData</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> (E) elementData[index];<br>&#125;<br><br><span class="hljs-keyword">static</span> &lt;E&gt; E <span class="hljs-title function_">elementAt</span><span class="hljs-params">(Object[] es, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> (E) es[index];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns the element at the specified position in this list.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  index index of the element to return</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the element at the specified position in this list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    Objects.checkIndex(index, size);<br>    <span class="hljs-keyword">return</span> elementData(index);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>需要将删除点之后的元素向前移动一个位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    Objects.checkIndex(index, size);<br>    <span class="hljs-keyword">final</span> Object[] es = elementData;<br><br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> (E) es[index];<br>    fastRemove(es, index);<br><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">final</span> Object[] es = elementData;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.size;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    found: &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (; i &lt; size; i++)<br>                <span class="hljs-keyword">if</span> (es[i] == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">break</span> found;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (; i &lt; size; i++)<br>                <span class="hljs-keyword">if</span> (o.equals(es[i]))<br>                    <span class="hljs-keyword">break</span> found;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    fastRemove(es, i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fastRemove</span><span class="hljs-params">(Object[] es, <span class="hljs-type">int</span> i)</span> &#123;<br>    modCount++;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> newSize;<br>    <span class="hljs-keyword">if</span> ((newSize = size - <span class="hljs-number">1</span>) &gt; i)<br>        System.arraycopy(es, i + <span class="hljs-number">1</span>, es, i, newSize - i);<br>    es[size = newSize] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 清除该位置的引用</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="trimToSize"><a href="#trimToSize" class="headerlink" title="trimToSize()"></a>trimToSize()</h3><p>将底层数组的容量调整为当前列表保存的实际元素的大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trimToSize</span><span class="hljs-params">()</span> &#123;<br>    modCount++;<br>    <span class="hljs-keyword">if</span> (size &lt; elementData.length) &#123;<br>        elementData = (size == <span class="hljs-number">0</span>)<br>          ? EMPTY_ELEMENTDATA<br>          : Arrays.copyOf(elementData, size);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="indexOf-、lastIndexOf"><a href="#indexOf-、lastIndexOf" class="headerlink" title="indexOf()、lastIndexOf()"></a>indexOf()、lastIndexOf()</h3><p>获取元素第一次出现的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">return</span> indexOf(o) &gt;= <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">return</span> indexOfRange(o, <span class="hljs-number">0</span>, size);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">indexOfRange</span><span class="hljs-params">(Object o, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    Object[] es = elementData;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; end; i++) &#123;<br>            <span class="hljs-keyword">if</span> (es[i] == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; end; i++) &#123;<br>            <span class="hljs-keyword">if</span> (o.equals(es[i])) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lastIndexOf</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">return</span> lastIndexOfRange(o, <span class="hljs-number">0</span>, size);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">lastIndexOfRange</span><span class="hljs-params">(Object o, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    Object[] es = elementData;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> end - <span class="hljs-number">1</span>; i &gt;= start; i--) &#123;<br>            <span class="hljs-keyword">if</span> (es[i] == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> end - <span class="hljs-number">1</span>; i &gt;= start; i--) &#123;<br>            <span class="hljs-keyword">if</span> (o.equals(es[i])) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Fail-Fast"><a href="#Fail-Fast" class="headerlink" title="Fail-Fast"></a>Fail-Fast</h3><p>在对迭代器进行遍历时，每次调用next都会去检查modCount是否和创建时一致，如果不一致，则抛出异常。添加删除元素都会修改modCount，因此在遍历集合时，如果需要删除元素，需要调用迭代器的remove方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Itr</span>();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>    <span class="hljs-type">int</span> cursor;       <span class="hljs-comment">// index of next element to return</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">lastRet</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// index of last element returned; -1 if no such</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<br><br>    <span class="hljs-comment">// prevent creating a synthetic constructor</span><br>    Itr() &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cursor != size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        checkForComodification();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> cursor;<br>        <span class="hljs-keyword">if</span> (i &gt;= size)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>        Object[] elementData = ArrayList.<span class="hljs-built_in">this</span>.elementData;<br>        <span class="hljs-keyword">if</span> (i &gt;= elementData.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        cursor = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> (E) elementData[lastRet = i];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br>        checkForComodification();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ArrayList.<span class="hljs-built_in">this</span>.remove(lastRet);<br>            cursor = lastRet;<br>            lastRet = -<span class="hljs-number">1</span>;<br>            expectedModCount = modCount;<br>        &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在通过foreach遍历元素时，实际可以删除倒数第二个元素，因为此时删除后，hasNext()返回为false，不会再执行next()方法了</p>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模块</title>
    <link href="/2023/05/02/2438a99988b2/"/>
    <url>/2023/05/02/2438a99988b2/</url>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>模块加载为同步操作，模块加载后会被缓存，后续加载会取得缓存的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> moduleB = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./moduleB&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">stuff</span>: moduleB.<span class="hljs-title function_">doStuff</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h3><h4 id="模块标签与定义"><a href="#模块标签与定义" class="headerlink" title="模块标签与定义"></a>模块标签与定义</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;module&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;xxx.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> // 实际行为和defer一致<br></code></pre></td></tr></table></figure><h4 id="模块行为"><a href="#模块行为" class="headerlink" title="模块行为"></a>模块行为</h4><ul><li>模块代码只能加载一次，是单例</li><li>默认在严格模式下执行</li><li>模块顶级this的值是undefined</li><li>模块中的var声明不会添加到window对象</li><li>模块是异步加载和执行的</li></ul><h4 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 命名导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> foo = <span class="hljs-string">&#x27;foo&#x27;</span><br><span class="hljs-keyword">const</span> foo = <span class="hljs-string">&#x27;foo&#x27;</span><br><span class="hljs-keyword">export</span> &#123; foo &#125;<br><span class="hljs-comment">// 默认导出</span><br><span class="hljs-keyword">const</span> foo = <span class="hljs-string">&#x27;foo&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> foo ==&gt; <span class="hljs-keyword">export</span> &#123; foo <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span> &#125;<br></code></pre></td></tr></table></figure><h4 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 命名导入</span><br><span class="hljs-keyword">export</span> &#123; foo, bar, baz &#125;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><span class="hljs-comment">// 默认导入</span><br><span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span> ==&gt; <span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><span class="hljs-comment">// 命名和默认导入</span><br><span class="hljs-keyword">import</span> foo , &#123; baz, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> foo, baz, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><span class="hljs-keyword">import</span> foo, * <span class="hljs-keyword">as</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./foo.js&#x27;</span><br><br></code></pre></td></tr></table></figure><h4 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">// 支持模块的会执行，不支持的不会执行<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;module&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;module.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>// 不支持模块的执行，支持的不执行<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">nomodule</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;module.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>客户端存储</title>
    <link href="/2023/05/02/68458ce54172/"/>
    <url>/2023/05/02/68458ce54172/</url>
    
    <content type="html"><![CDATA[<h2 id="客户端存储"><a href="#客户端存储" class="headerlink" title="客户端存储"></a>客户端存储</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><ul><li>不超过300个cookie</li><li>每个cookie不超过4096字节，超出限制，则静默删除</li><li>每个域不超过20个cookie</li><li>每个域不超过81920字节</li></ul><h4 id="cookie的构成"><a href="#cookie的构成" class="headerlink" title="cookie的构成"></a>cookie的构成</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Set</span>-<span class="hljs-title class_">Cookie</span>: name=value; expires=xxx; domain=.<span class="hljs-property">wrox</span>.<span class="hljs-property">com</span>; path=/; secure<br></code></pre></td></tr></table></figure><p>名称和值必须经过URL编码</p><p>域：cookie有效的域，发送到这个域的所有请求都会包含对应的cookie</p><p>路径：请求URL中包含这个路径才会把cookie发送到服务器</p><p>过期时间：表示何时删除cookie的时间戳</p><p>安全标志：设置之后，只在使用SSL安全连接的情况下才会把cookie发送到服务器</p><h4 id="JavaScript中的cookie"><a href="#JavaScript中的cookie" class="headerlink" title="JavaScript中的cookie"></a>JavaScript中的cookie</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">&#x27;name&#x27;</span>) + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-comment">// 获取cookie，需要调用decodeURIComponent进行解码</span><br></code></pre></td></tr></table></figure><h4 id="子cookie"><a href="#子cookie" class="headerlink" title="子cookie"></a>子cookie</h4><p>为绕过浏览器对每个域cookie数的限制，在单个cookie中存储多个键值对</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">name=name1=value1&amp;name2=value2&amp;name3=value3&amp;name4=value4=name5=value5<br></code></pre></td></tr></table></figure><h4 id="使用cookie的注意事项"><a href="#使用cookie的注意事项" class="headerlink" title="使用cookie的注意事项"></a>使用cookie的注意事项</h4><p>http-only的cookie，设置后只能在服务器上读取，前端读取直接返回空字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Set</span>-<span class="hljs-title class_">Cookie</span>: name=value; expires=xxx; domain=.<span class="hljs-property">wrox</span>.<span class="hljs-property">com</span>; path=/; secure; <span class="hljs-title class_">HTTPOnly</span>;<br></code></pre></td></tr></table></figure><h3 id="Web-Storage"><a href="#Web-Storage" class="headerlink" title="Web Storage"></a>Web Storage</h3><h4 id="Storage类型"><a href="#Storage类型" class="headerlink" title="Storage类型"></a>Storage类型</h4><p>只能存储字符串，非字符串数据在存储之前会自动转换为字符串</p><h4 id="sessionStorage对象"><a href="#sessionStorage对象" class="headerlink" title="sessionStorage对象"></a>sessionStorage对象</h4><p>sessionStorage只存储会话数据，即数据只会存储到浏览器关闭</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> sessionStorage) &#123;<br>    <span class="hljs-keyword">let</span> value = sessionStorage[key]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="localStorage对象"><a href="#localStorage对象" class="headerlink" title="localStorage对象"></a>localStorage对象</h4><p>要访问同一个localStorage对象，页面必须来自同一个域（子域不可以）、在相同的端口上使用相同的协议</p><p>localStorage数据不受页面刷新影响，也不会因为关闭窗口、标签页或重启浏览器而丢失。除非主动调用删除方法或者清除浏览器缓存</p><h4 id="存储事件"><a href="#存储事件" class="headerlink" title="存储事件"></a>存储事件</h4><p>对于sessionStorage和localStorage上的任何更改都会触发storage事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;storage&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">domain</span>) <span class="hljs-comment">// 存储变化的域</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">key</span>) <span class="hljs-comment">// 被设置或删除的键</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">newValue</span>) <span class="hljs-comment">// 键被设置的新值，若键被删除则为null</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">oldValue</span>) <span class="hljs-comment">// 键变化之前的值</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Storage限制"><a href="#Storage限制" class="headerlink" title="Storage限制"></a>Storage限制</h4><p>大多数限制为每个源5MB</p><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>如果给定的数据库已存在，则会发送一个打开它的请求；如果不存在，则会发送创建并打开这个数据库的请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> db, request, version = <span class="hljs-number">1</span><br>request = indexedDB.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, version)<br>request.<span class="hljs-property">onerror</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Failed to open &#x27;</span> + event.<span class="hljs-property">target</span>.<span class="hljs-property">errorCode</span>)<br>request.<span class="hljs-property">onsuccess</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> db = event.<span class="hljs-property">target</span>.<span class="hljs-property">result</span><br></code></pre></td></tr></table></figure><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> transaction = db.<span class="hljs-title function_">transaction</span>(<span class="hljs-string">&#x27;users&#x27;</span>, <span class="hljs-string">&#x27;readwrite&#x27;</span>)<br><span class="hljs-keyword">let</span> store = transaction.<span class="hljs-title function_">objectStore</span>(<span class="hljs-string">&#x27;users&#x27;</span>)<br>request = store.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;007&#x27;</span>)<br>request.<span class="hljs-property">onerror</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Did not get the object&#x27;</span>)<br>request.<span class="hljs-property">onsuccess</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>.<span class="hljs-property">firstName</span>)<br></code></pre></td></tr></table></figure><h4 id="插入对象"><a href="#插入对象" class="headerlink" title="插入对象"></a>插入对象</h4><p>已存在同名的键时，add()会导致错误，put()会简单地重写该对象</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">index = store.<span class="hljs-title function_">createIndex</span>(<span class="hljs-string">&#x27;indexname&#x27;</span>, <span class="hljs-string">&#x27;attributename&#x27;</span>, &#123; <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span> &#125;)<br>request = index.<span class="hljs-title function_">openCursor</span>()<br></code></pre></td></tr></table></figure><h4 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h4><p>两个不同的浏览器标签页打开同一个网页，可能会出现一个网页尝试升级数据库而另一个尚未就绪的情形</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">request = indexedDB.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-number">1</span>)<br>request.<span class="hljs-property">onsuccess</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    database = event.<span class="hljs-property">target</span>.<span class="hljs-property">result</span><br>    database.<span class="hljs-property">onversionchange</span> = <span class="hljs-function">() =&gt;</span> database.<span class="hljs-title function_">close</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="IndexedDB限制"><a href="#IndexedDB限制" class="headerlink" title="IndexedDB限制"></a>IndexedDB限制</h4><p>indexdeDB仍存在跨域的问题，信息不能跨域共享</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络请求与远程资源</title>
    <link href="/2023/04/30/bbb496a8ae02/"/>
    <url>/2023/04/30/bbb496a8ae02/</url>
    
    <content type="html"><![CDATA[<h2 id="网络请求与远程资源"><a href="#网络请求与远程资源" class="headerlink" title="网络请求与远程资源"></a>网络请求与远程资源</h2><h3 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h3><h4 id="使用XHR"><a href="#使用XHR" class="headerlink" title="使用XHR"></a>使用XHR</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><span class="hljs-comment">// 同步请求的处理方式</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>, <span class="hljs-literal">false</span>)<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>)<br><br><span class="hljs-keyword">if</span> ((xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) || xhr.<span class="hljs-property">status</span> == <span class="hljs-number">304</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Request was unsuccessful: &#x27;</span> + xhr.<span class="hljs-property">status</span>)<br>&#125;<br><span class="hljs-comment">// 异步请求的处理方式</span><br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 先添加事件监听</span><br>    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) || xhr.<span class="hljs-property">status</span> == <span class="hljs-number">304</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Request was unsuccessful: &#x27;</span> + xhr.<span class="hljs-property">status</span>)<br>        &#125;<br>    &#125;<br>&#125;<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>, <span class="hljs-literal">true</span>)<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-comment">// 收到响应前，想取消异步请求</span><br>xhr.<span class="hljs-title function_">abort</span>()<br><br><span class="hljs-comment">// xhr.readyState</span><br><span class="hljs-comment">// 0 -- 未初始化，尚未调用open方法</span><br><span class="hljs-comment">// 1 -- 已打开，已调用open方法，未调用send方法</span><br><span class="hljs-comment">// 2 -- 已发送，已调用send方法，尚未收到响应</span><br><span class="hljs-comment">// 3 -- 接受中，已收到部分响应</span><br><span class="hljs-comment">// 4 -- 完成，已经收到所有响应，可以使用了</span><br></code></pre></td></tr></table></figure><h4 id="HTTP头部"><a href="#HTTP头部" class="headerlink" title="HTTP头部"></a>HTTP头部</h4><p>setRequestHeader自定义请求头部信息，必须在open之后、send之前调用</p><p>getResponseHeader获取响应头部</p><p>getAllResponseHeaders获取所有响应头部</p><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>发送GET请求，查询字符串的key和value都必须使用encodeURIComponent()编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addURLParam</span>(<span class="hljs-params">url, name, value</span>) &#123;<br>    url += url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) == -<span class="hljs-number">1</span> ? <span class="hljs-string">&#x27;?&#x27;</span> : <span class="hljs-string">&#x27;&amp;&#x27;</span><br>    url += <span class="hljs-built_in">encodeURIComponent</span>(name) + <span class="hljs-string">&#x27;=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(value)<br>    <span class="hljs-keyword">return</span> url<br>&#125;<br><span class="hljs-keyword">let</span> url = <span class="hljs-string">&#x27;example.php&#x27;</span><br>url = <span class="hljs-title function_">addURLParam</span>(url, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Nicholas&#x27;</span>)<br>url = <span class="hljs-title function_">addURLParam</span>(url, <span class="hljs-string">&#x27;book&#x27;</span>, <span class="hljs-string">&#x27;JavaScript&#x27;</span>)<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, url, <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 模拟表单提交</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;example.php&#x27;</span>, <span class="hljs-literal">true</span>)<br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)<br>xhr.<span class="hljs-title function_">send</span>()<br></code></pre></td></tr></table></figure><h4 id="XMLHttpRequest-Level-2"><a href="#XMLHttpRequest-Level-2" class="headerlink" title="XMLHttpRequest Level 2"></a>XMLHttpRequest Level 2</h4><h5 id="FormData类型"><a href="#FormData类型" class="headerlink" title="FormData类型"></a>FormData类型</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用FormData，则不再需要显示设置请求头部了</span><br><span class="hljs-keyword">let</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;user-info&#x27;</span>)<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(form))<br><br><span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FromData</span>()<br>data.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Nicholas&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.<span class="hljs-property">timeout</span> = <span class="hljs-number">1000</span> <span class="hljs-comment">// 设置1秒超时</span><br>xhr.<span class="hljs-property">ontimeout</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;request did not resturn in a second&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 超时，readyState会变为4，因此也会调用onreadystatechange事件处理程序，但是访问status属性会发生错误</span><br></code></pre></td></tr></table></figure><h5 id="overrideMimeType方法"><a href="#overrideMimeType方法" class="headerlink" title="overrideMimeType方法"></a>overrideMimeType方法</h5><p>假设服务器实际发送了XML数据，但是响应头设置的MIME类型是text&#x2F;plain，导致虽然数据是XML，但responseXML仍为null，此时需要调用overrideMimeType()保证将响应当成XML处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;text.php&#x27;</span>, <span class="hljs-literal">true</span>)<br>xhr.<span class="hljs-title function_">overrideMimeType</span>(<span class="hljs-string">&#x27;text/xml&#x27;</span>) <span class="hljs-comment">// 确保将响应当作xml处理，必须在send之前调用</span><br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>)<br></code></pre></td></tr></table></figure><h3 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h3><h4 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h4><p>只要从服务器收到响应，无论状态码是什么，都会触发load事件，这样就不用检查readyState属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> ((xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) || xhr.<span class="hljs-property">status</span> == <span class="hljs-number">304</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;request was unsuccessful: &#x27;</span> + xhr.<span class="hljs-property">status</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="progress事件"><a href="#progress事件" class="headerlink" title="progress事件"></a>progress事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.<span class="hljs-property">onprogress</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123; <span class="hljs-comment">// 必须在open之前添加</span><br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">lengthComputable</span>) &#123; <span class="hljs-comment">// 表示进度信息是否可用</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">position</span>) <span class="hljs-comment">// 接受到的字节数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">totalSize</span>) <span class="hljs-comment">// 响应的Content-Length头部定义的总字节数</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="跨源资源共享"><a href="#跨源资源共享" class="headerlink" title="跨源资源共享"></a>跨源资源共享</h3><p>对于简单的请求，GET或POST请求，没有自定义头部，同时请求体是text&#x2F;plain类型，这时请求在发送时会有一个额外的头部叫Origin，Origin头部包含发送请求的页面的源（协议、域名和端口），以便服务器确定是否为其提供响应</p><p>如果服务器决定响应请求，则会发送Access-Control-Allow-Origin头部，包含相同的源；如果资源公开，则包含*。如果没有这个头部或者有但源不匹配，则表明不会响应浏览器请求。（无论请求还是响应都不会包含cookie信息</p><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><p>CORS通过一种预检请求的服务器验证机制，允许使用自定义头部、除GET和POST之外的方法，以及不同请求体内容类型。在发送设计上述高级选项的请求时，会先向服务器发送一个“预检”请求</p><p>使用options方法发送，并包含以下头部：</p><ul><li>Origin: 与简单请求相同</li><li>Access-Control-Request-Method: 请求希望使用的方法</li><li>Access-Control-Request-Headers: 要使用的逗号分隔的自定义头部列表</li></ul><p>服务器会在响应中发送如下头部：</p><ul><li>Access-Control-Allow-Origin: 与简单请求相同</li><li>Access-Control-Allow-Methods: 允许的方法</li><li>Access-Control-Allow-Headers: 服务器允许的头部（逗号分隔的列表）</li><li>Access-Control-Max-Age: 缓存预检请求的秒数</li></ul><p>预检请求返回后，结果会按响应指定的时间缓存一段时间，即只有第一个发送这种类型的请求时才会多发送一次额外的HTTP请求（默认缓存5秒）</p><h4 id="凭据请求"><a href="#凭据请求" class="headerlink" title="凭据请求"></a>凭据请求</h4><p>将请求的withCredentials属性设置为true表明请求会发送凭据，如果服务器允许这种请求，则会在响应中包含</p><p>Access-Control-Allow-Credentials: true</p><h3 id="替代性跨源技术"><a href="#替代性跨源技术" class="headerlink" title="替代性跨源技术"></a>替代性跨源技术</h3><h4 id="图片探测"><a href="#图片探测" class="headerlink" title="图片探测"></a>图片探测</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>img.<span class="hljs-property">onload</span> = img.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;done&#x27;</span>)<br>&#125;<br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://www.example.com/test?name=test&#x27;</span><br></code></pre></td></tr></table></figure><p>图片探测的缺点是只能发送GET请求和无法获取服务器响应的内容，即利用图片探测只能实现浏览器与服务器单向通信</p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>script和img类似，可以不受限制地从其它域加载资源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleResponse</span>(<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">id</span>)<br>&#125;<br><span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://freegeoip.net/json/?callback=handleResponse&#x27;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script)<br></code></pre></td></tr></table></figure><p>需要从不同的域拉取可执行代码，响应中可能存在恶意内容</p><p>不好确定JSONP请求是否失败</p><h3 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;bar.txt&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">url</span>) <span class="hljs-comment">// 请求的url地址</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">redirected</span>) <span class="hljs-comment">// 是否重定向</span><br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">text</span>()<br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err) <span class="hljs-comment">// 违反CORS、无网络连接、HTTPS配错等问题都会导致promise拒绝</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data))<br></code></pre></td></tr></table></figure><h4 id="常见Fetch请求模式"><a href="#常见Fetch请求模式" class="headerlink" title="常见Fetch请求模式"></a>常见Fetch请求模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送json数据</span><br><span class="hljs-keyword">let</span> payload = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;)<br><span class="hljs-keyword">let</span> headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(&#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>&#125;)<br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/send&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">body</span>: payload,<br>    <span class="hljs-attr">headers</span>: headers<br>&#125;)<br><br><span class="hljs-comment">// 中断请求</span><br><span class="hljs-keyword">let</span> abortController = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>()<br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/wiki&#x27;</span>, &#123;<br>    <span class="hljs-attr">signal</span>: abortController.<span class="hljs-property">signal</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;aborted&#x27;</span>))<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> abortController.<span class="hljs-title function_">abort</span>(), <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h4 id="Headers对象"><a href="#Headers对象" class="headerlink" title="Headers对象"></a>Headers对象</h4><p>Headers与Map用法基本相同，但是初始化Headers对象时，可以直接使用键值对的对象。append()方法支持添加多个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> seed = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span> &#125;<br><span class="hljs-keyword">let</span> header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(seed)<br><br>header.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(header.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)) <span class="hljs-comment">// &#x27;bar, baz&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建Request对象</span><br><span class="hljs-keyword">let</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-string">&#x27;http://test.com&#x27;</span>, &#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span> &#125;)<br><span class="hljs-comment">// 克隆Request对象</span><br><span class="hljs-keyword">let</span> r1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-string">&#x27;http://test.com&#x27;</span>, &#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;foobar&#x27;</span> &#125;)<br><span class="hljs-keyword">let</span> r2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(r1) <span class="hljs-comment">// 第一个请求的请求体会被标记为已使用r1.bodyUsed-true</span><br><span class="hljs-keyword">let</span> r3 = r1.<span class="hljs-title function_">clone</span>() <span class="hljs-comment">// 创建一模一样的副本，如果创建前r1的请求体已经被使用，则无法克隆</span><br></code></pre></td></tr></table></figure><h3 id="Beacon-API"><a href="#Beacon-API" class="headerlink" title="Beacon API"></a>Beacon API</h3><p>在unload事件处理程序中创建的任何异步请求都会被浏览器取消</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">navigator.<span class="hljs-title function_">sendBeacon</span>(<span class="hljs-string">&#x27;https://test.com&#x27;</span>, <span class="hljs-string">&#x27;&#123; foo: &quot;bar&quot; &#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>sendBeacon发送POST请求，同时在任何时候都可以使用</p><p>调用sendBeacon后，浏览器会把请求添加到内部的请求队列，之后主动发送请求</p><p>默认会携带所有相关的cookie</p><h3 id="Web-Socket"><a href="#Web-Socket" class="headerlink" title="Web Socket"></a>Web Socket</h3><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://www.example.com&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ws.<span class="hljs-property">readyState</span>)<br><span class="hljs-comment">// 0 连接正在建立</span><br><span class="hljs-comment">// 1 连接已经建立</span><br><span class="hljs-comment">// 2 连接正在关闭</span><br><span class="hljs-comment">// 3 连接已经关闭</span><br>ws.<span class="hljs-title function_">close</span>()<br></code></pre></td></tr></table></figure><h4 id="发送和接受数据"><a href="#发送和接受数据" class="headerlink" title="发送和接受数据"></a>发送和接受数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-keyword">let</span> buffer = <span class="hljs-title class_">Uint8Array</span>.<span class="hljs-title function_">from</span>([<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>])<br><span class="hljs-keyword">let</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>])<br>ws.<span class="hljs-title function_">send</span>(str)<br>ws.<span class="hljs-title function_">send</span>(buffer)<br>ws.<span class="hljs-title function_">send</span>(blob)<br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">data</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其它事件"><a href="#其它事件" class="headerlink" title="其它事件"></a>其它事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 连接成功建立时触发</span><br>ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;connection established&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 发生错误时触发</span><br>ws.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;connection error&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 连接关闭时触发</span><br>ws.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;connection closed&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON</title>
    <link href="/2023/04/30/23ee38e7e1f1/"/>
    <url>/2023/04/30/23ee38e7e1f1/</url>
    
    <content type="html"><![CDATA[<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h4><p>字符串（必须双引号）、数值、布尔值和null，特殊值undefined不可以</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>属性名必须添加双引号</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>和JavaScript数组字面量形式相同</p><h3 id="解析与序列化"><a href="#解析与序列化" class="headerlink" title="解析与序列化"></a>解析与序列化</h3><h4 id="序列化选项"><a href="#序列化选项" class="headerlink" title="序列化选项"></a>序列化选项</h4><h5 id="过滤结果"><a href="#过滤结果" class="headerlink" title="过滤结果"></a>过滤结果</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> book = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Professional JavaScript&#x27;</span>,<br>    <span class="hljs-attr">authors</span>: [<br>        <span class="hljs-string">&#x27;Nicholas C. Zakas&#x27;</span>,<br>        <span class="hljs-string">&#x27;Matt Frisbie&#x27;</span><br>    ],<br>    <span class="hljs-attr">edition</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">year</span>: <span class="hljs-number">2017</span><br>&#125;<br><span class="hljs-keyword">let</span> jsonText = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(book, [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;edition&#x27;</span>]) <span class="hljs-comment">// 只包含这两个属性</span><br><br>jsonText = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(book, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">switch</span>(key) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;authors&#x27;</span>:<br>            <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;year&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 返回undefined会忽略该属性</span><br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">return</span> value<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="字符串缩进"><a href="#字符串缩进" class="headerlink" title="字符串缩进"></a>字符串缩进</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> book = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Professional JavaScript&#x27;</span>,<br>    <span class="hljs-attr">authors</span>: [<br>        <span class="hljs-string">&#x27;Nicholas C. Zakas&#x27;</span>,<br>        <span class="hljs-string">&#x27;Matt Frisbie&#x27;</span><br>    ],<br>    <span class="hljs-attr">edition</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">year</span>: <span class="hljs-number">2017</span><br>&#125;<br><span class="hljs-keyword">let</span> jsonText = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(book, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 第三个参数控制缩进和空格</span><br>jsonText = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(book, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;----&#x27;</span>) <span class="hljs-comment">// 也可以使用字符来控制缩进</span><br></code></pre></td></tr></table></figure><h5 id="toJSON方法"><a href="#toJSON方法" class="headerlink" title="toJSON方法"></a>toJSON方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> book = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Professional JavaScript&#x27;</span>,<br>    <span class="hljs-attr">edition</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">year</span>: <span class="hljs-number">2017</span>,<br>    <span class="hljs-attr">toJSON</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 自定义序列化</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">year</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(book) <span class="hljs-comment">// 2017</span><br></code></pre></td></tr></table></figure><h3 id="解析选项"><a href="#解析选项" class="headerlink" title="解析选项"></a>解析选项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> book = &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Professional JavaScript&#x27;</span>,<br>    <span class="hljs-attr">edition</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">year</span>: <span class="hljs-number">2017</span>,<br>    <span class="hljs-attr">releaseDate</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2023</span>, <span class="hljs-number">4</span>, <span class="hljs-number">30</span>)<br>&#125;<br><span class="hljs-keyword">let</span> text = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(book) <span class="hljs-comment">// releaseDate会被替换为ISO 8601日期字符串</span><br><span class="hljs-keyword">let</span> bookCopy = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text, <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> key === <span class="hljs-string">&#x27;releaseDate&#x27;</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(value) : value) <span class="hljs-comment">// 对日期进行还原</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript API</title>
    <link href="/2023/04/28/059714670e62/"/>
    <url>/2023/04/28/059714670e62/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-API"><a href="#JavaScript-API" class="headerlink" title="JavaScript API"></a>JavaScript API</h2><h3 id="Atomics和SharedArrayBuffer"><a href="#Atomics和SharedArrayBuffer" class="headerlink" title="Atomics和SharedArrayBuffer"></a>Atomics和SharedArrayBuffer</h3><h4 id="SharedArrayBuffer"><a href="#SharedArrayBuffer" class="headerlink" title="SharedArrayBuffer"></a>SharedArrayBuffer</h4><p>SharedArrayBuffer与ArrayBuffer具有同样的API，但是ArrayBuffer必须在不同执行上下文间切换，而SharedArrayBuffer可以被任意多个执行上下文同时使用</p><h4 id="原子操作基础"><a href="#原子操作基础" class="headerlink" title="原子操作基础"></a>原子操作基础</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> sharedArrayBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SharedArrayBuffer</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">let</span> typedArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Unit8Array</span>(sharedArrayBuffer)<br><span class="hljs-keyword">const</span> index = <span class="hljs-number">0</span><br><span class="hljs-keyword">const</span> increment = <span class="hljs-number">5</span><br><span class="hljs-title class_">Atomics</span>.<span class="hljs-title function_">add</span>(typedArray, index, increment)<br><span class="hljs-title class_">Atomics</span>.<span class="hljs-title function_">sub</span>(typedArray, index, increment)<br><br><span class="hljs-title class_">Atomics</span>.<span class="hljs-title function_">load</span>(view, <span class="hljs-number">0</span>) <span class="hljs-comment">// 原子读</span><br><span class="hljs-title class_">Atomics</span>.<span class="hljs-title function_">store</span>(view, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 原子写</span><br><br><span class="hljs-title class_">Atomics</span>.<span class="hljs-title function_">exchange</span>(view, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 先读取索引0处的值，再写入4</span><br><span class="hljs-title class_">Atomics</span>.<span class="hljs-title function_">compareExchange</span>(view, <span class="hljs-number">0</span>, initial, result) <span class="hljs-comment">// 当目标索引处的值与预期值匹配时，才执行写操作</span><br><br><span class="hljs-title class_">Atomics</span>.<span class="hljs-title function_">wait</span>(view, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1E4</span>) <span class="hljs-comment">// 如果索引处的值为0，则停止，超时时间为10000</span><br><span class="hljs-title class_">Atomics</span>.<span class="hljs-title function_">notify</span>(view, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 唤醒一个线程</span><br></code></pre></td></tr></table></figure><h3 id="跨上下文消息"><a href="#跨上下文消息" class="headerlink" title="跨上下文消息"></a>跨上下文消息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">origin</span> === <span class="hljs-string">&#x27;xxx&#x27;</span>) &#123;<br>        <span class="hljs-title function_">processMessage</span>(event.<span class="hljs-property">data</span>)<br>        event.<span class="hljs-property">source</span>.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;received!&#x27;</span>, <span class="hljs-string">&#x27;origin url&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Encoding-API"><a href="#Encoding-API" class="headerlink" title="Encoding API"></a>Encoding API</h3><p>实现字符串和定型数组之间的转换</p><h4 id="文本编码"><a href="#文本编码" class="headerlink" title="文本编码"></a>文本编码</h4><h5 id="批量编码"><a href="#批量编码" class="headerlink" title="批量编码"></a>批量编码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> textEncoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEncoder</span>()<br><span class="hljs-keyword">const</span> decodedText = <span class="hljs-string">&#x27;foo&#x27;</span><br><span class="hljs-keyword">const</span> encodedText = textEncoder.<span class="hljs-title function_">encode</span>(decodedText) <span class="hljs-comment">// Uint8Array返回每个字符的UTF-8编码</span><br><br><span class="hljs-keyword">const</span> fooArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">const</span> fooResult = textEncoder.<span class="hljs-title function_">encodeInto</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, fooArr)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fooResult) <span class="hljs-comment">// &#123; read: 3, written: 3 &#125;</span><br></code></pre></td></tr></table></figure><h5 id="流编码"><a href="#流编码" class="headerlink" title="流编码"></a>流编码</h5><h4 id="文本解码"><a href="#文本解码" class="headerlink" title="文本解码"></a>文本解码</h4><h5 id="批量解码"><a href="#批量解码" class="headerlink" title="批量解码"></a>批量解码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> textDecoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextDecoder</span>()<br><span class="hljs-keyword">const</span> encodedText = <span class="hljs-title class_">Uint8Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">102</span>, <span class="hljs-number">111</span>, <span class="hljs-number">111</span>)<br><span class="hljs-keyword">const</span> decodedText = textDecoder.<span class="hljs-title function_">decoder</span>(encodedText)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(decodedText) <span class="hljs-comment">// foo</span><br></code></pre></td></tr></table></figure><h5 id="流解码"><a href="#流解码" class="headerlink" title="流解码"></a>流解码</h5><h3 id="File-API与Blob-API"><a href="#File-API与Blob-API" class="headerlink" title="File API与Blob API"></a>File API与Blob API</h3><h4 id="File类型"><a href="#File类型" class="headerlink" title="File类型"></a>File类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> filesList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;files-list&#x27;</span>)<br>filesList.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> files = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span><br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> len = files.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>        <span class="hljs-keyword">const</span> f = files[i]<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;f.name&#125;</span> <span class="hljs-subst">$&#123;f.type&#125;</span> <span class="hljs-subst">$&#123;f.size&#125;</span> bytes`</span>)<br>        i++<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="FileReader类型"><a href="#FileReader类型" class="headerlink" title="FileReader类型"></a>FileReader类型</h4><p>一种异步读取文件机制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> filesList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;files-list&#x27;</span>)<br>filesList.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> info = <span class="hljs-string">&#x27;&#x27;</span><br>    output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;output&#x27;</span>)<br>    progress = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;progress&#x27;</span>)<br>    files = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span><br>    type = <span class="hljs-string">&#x27;default&#x27;</span><br>    reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>()<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/image/</span>.<span class="hljs-title function_">test</span>(files[<span class="hljs-number">0</span>].<span class="hljs-property">type</span>)) &#123;<br>        reader.<span class="hljs-title function_">readAsDataURL</span>(files[<span class="hljs-number">0</span>])<br>        type = <span class="hljs-string">&#x27;image&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        reader.<span class="hljs-title function_">readAsText</span>(files[<span class="hljs-number">0</span>])<br>        type = <span class="hljs-string">&#x27;text&#x27;</span><br>    &#125;<br><br>    reader.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        output.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;Could not read file, error code is &#x27;</span> + reader.<span class="hljs-property">error</span>.<span class="hljs-property">code</span><br>    &#125;<br>    <span class="hljs-comment">// progress每50毫秒触发一次</span><br>    reader.<span class="hljs-property">onprogress</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">lengthComputable</span>) &#123;<br>            progress.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;event.loaded&#125;</span> / <span class="hljs-subst">$&#123;event.total&#125;</span>`</span><br>        &#125;<br>    &#125;<br>    reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> html = <span class="hljs-string">&#x27;*&#x27;</span><br>        <span class="hljs-keyword">switch</span>(type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image&#x27;</span>:<br>                html = <span class="hljs-string">`&lt;img src=&quot;<span class="hljs-subst">$&#123;reader.result&#125;</span>&quot;&gt;`</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;text&#x27;</span>:<br>                html = reader.<span class="hljs-property">result</span><br>                <span class="hljs-keyword">break</span><br>        &#125;<br>        output.<span class="hljs-property">innerHTML</span> = html<br>    &#125;<br><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="FileReaderSync类型"><a href="#FileReaderSync类型" class="headerlink" title="FileReaderSync类型"></a>FileReaderSync类型</h4><p>FileReader的同步版本，只有在整个文件都加载到内存后，才会继续执行。FileReaderSync只有在工作线程可用，因为如果读取整个文件太耗时则会影响全局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用postMessage向工作线程发送了一个File对象</span><br>self.<span class="hljs-property">onmessage</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> syncReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReaderSync</span>()<br>    <span class="hljs-keyword">const</span> result = syncReader.<span class="hljs-title function_">readAsDataURL</span>(event.<span class="hljs-property">data</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>    self.<span class="hljs-title function_">postMessage</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Blob与部分读取"><a href="#Blob与部分读取" class="headerlink" title="Blob与部分读取"></a>Blob与部分读取</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> * <span class="hljs-title function_">slice</span>(<span class="hljs-params">file</span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MB</span> = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">const</span> end = start + <span class="hljs-variable constant_">MB</span><br>        <span class="hljs-keyword">const</span> blob = file.<span class="hljs-title function_">slice</span>(start, end) <span class="hljs-comment">// 文件切片</span><br>        <span class="hljs-keyword">if</span> (blob.<span class="hljs-title function_">size</span>() === <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">yield</span> &#123; <span class="hljs-attr">chunk</span>: i++, blob &#125;<br>        start = end<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象URL与Blob"><a href="#对象URL与Blob" class="headerlink" title="对象URL与Blob"></a>对象URL与Blob</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> filesList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;files-list&#x27;</span>)<br>filesList.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;output&#x27;</span>)<br>    progress = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;progress&#x27;</span>)<br>    files = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span><br>    url = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(files[<span class="hljs-number">0</span>]) <span class="hljs-comment">// 返回一个指向内存中地址的字符串</span><br>    <span class="hljs-keyword">if</span> (url) &#123;<br>        output.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;img src=&quot;<span class="hljs-subst">$&#123;url&#125;</span>&quot;&gt;`</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要对象URL还在使用，就不能释放内存，如果不再使用对象URL，则可以传给window.URL.revokeObjectURL()。</p><h3 id="原生拖放"><a href="#原生拖放" class="headerlink" title="原生拖放"></a>原生拖放</h3><h4 id="拖放事件"><a href="#拖放事件" class="headerlink" title="拖放事件"></a>拖放事件</h4><p>在某个元素被拖动时，会依次触发dragstart、drag和dragend</p><p>在按住鼠标不放并移动鼠标的那一刻，被拖动元素上会触发dragstart事件，dragstart事件触发后，只要目标还在拖动就会持续触发drag事件，当拖动停止时（把元素放到有效或无效的放置目标上），会触发dragend事件，3个事件的目标都是被拖动的元素</p><p>把元素拖动到一个有效的放置目标，会依次触发dragenter、dragover和(dragleave或drop)</p><p>只要把元素拖动到放置目标上，dragenter事件就会触发，dragenter事件触发之后，会立即触发dragover事件，并且在放置目标范围内拖动期间会持续触发。当元素被拖动到放置目标之外，dragover事件停止触发，dragleave事件触发，如果元素被拖动到了目标上，会触发drop事件，而不是dragleave事件</p><h4 id="自定义放置目标"><a href="#自定义放置目标" class="headerlink" title="自定义放置目标"></a>自定义放置目标</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将该元素转换为放置目标</span><br><span class="hljs-keyword">let</span> droptarget = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;droptarget&#x27;</span>)<br>droptarget.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragover&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>()<br>&#125;)<br>droptarget.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragenter&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>()<br>&#125;)<br><span class="hljs-comment">// Firefox中，放置事件的默认行为是导航到放在放置目标上的URL，把图片拖动到放置目标上会导致页面导航到图片文件</span><br><span class="hljs-comment">// 必须取消默认行为</span><br>droptarget.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;drag&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="dataTransfer对象"><a href="#dataTransfer对象" class="headerlink" title="dataTransfer对象"></a>dataTransfer对象</h4><p>所有拖动事件event都可以访问dataTransfer属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">event.<span class="hljs-property">dataTransfer</span>.<span class="hljs-title function_">setData</span>(<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-keyword">let</span> text = event.<span class="hljs-property">dataTransfer</span>.<span class="hljs-title function_">getData</span>(<span class="hljs-string">&#x27;text&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="dropEffect与effectAllowed"><a href="#dropEffect与effectAllowed" class="headerlink" title="dropEffect与effectAllowed"></a>dropEffect与effectAllowed</h4><p>必须在dragstart事件中设置这个属性</p><h5 id="dropEffect"><a href="#dropEffect" class="headerlink" title="dropEffect"></a>dropEffect</h5><ul><li>‘none’: 被拖动元素不能放到这里。除文本框之外所有元素的默认值</li><li>‘move’: 被拖动元素应该移动到放置目标</li><li>‘copy’: 被拖动元素应该复制到放置目标</li><li>‘link’: 表示放置目标会导航到被拖动元素</li></ul><h5 id="effectAllowed"><a href="#effectAllowed" class="headerlink" title="effectAllowed"></a>effectAllowed</h5><p>表示被拖动元素是否允许dropEffect</p><h4 id="可拖动能力"><a href="#可拖动能力" class="headerlink" title="可拖动能力"></a>可拖动能力</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">// 设置元素的draggable属性<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&#x27;true&#x27;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Notification-API"><a href="#Notification-API" class="headerlink" title="Notification API"></a>Notification API</h3><h4 id="通知权限"><a href="#通知权限" class="headerlink" title="通知权限"></a>通知权限</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Notification</span>.<span class="hljs-title function_">requestPermission</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">permission</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (permission === <span class="hljs-string">&#x27;granted&#x27;</span>) &#123;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">Notification</span>.<span class="hljs-property">permission</span>)<br></code></pre></td></tr></table></figure><h4 id="显示和隐藏通知"><a href="#显示和隐藏通知" class="headerlink" title="显示和隐藏通知"></a>显示和隐藏通知</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>(<span class="hljs-string">&#x27;title text&#x27;</span>, &#123;<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;body text&#x27;</span>,<br>    <span class="hljs-attr">image</span>: <span class="hljs-string">&#x27;image.png&#x27;</span>,<br>    <span class="hljs-attr">vibrate</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 震动</span><br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> n.<span class="hljs-title function_">close</span>(), <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h4 id="通知声明周期回调"><a href="#通知声明周期回调" class="headerlink" title="通知声明周期回调"></a>通知声明周期回调</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br>n.<span class="hljs-property">onshow</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;notification was shown&#x27;</span>)<br>n.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;notification was clicked&#x27;</span>)<br>n.<span class="hljs-property">onclose</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;notification was closed&#x27;</span>)<br>n.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;notification experienced an error&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="Page-Visibility-API"><a href="#Page-Visibility-API" class="headerlink" title="Page Visibility API"></a>Page Visibility API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span>) <span class="hljs-comment">// visible or hidden</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Streams-API"><a href="#Streams-API" class="headerlink" title="Streams API"></a>Streams API</h3><h3 id="计时API"><a href="#计时API" class="headerlink" title="计时API"></a>计时API</h3><p>performance.now()计时器采用相对度量，在执行上下文创建时从0开始计时。例如，打开页面或创建工作线程时，performance.now()会从0开始计时</p><p>performance.timeOrigin属性返回计时器初始化时全局系统时钟的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> relativeTimestamp = performance.<span class="hljs-title function_">now</span>()<br><span class="hljs-keyword">const</span> absoluteTimestamp = performance.<span class="hljs-property">timeOrigin</span> + relativeTimestamp<br></code></pre></td></tr></table></figure><h3 id="Web组件"><a href="#Web组件" class="headerlink" title="Web组件"></a>Web组件</h3><h4 id="影子DOM"><a href="#影子DOM" class="headerlink" title="影子DOM"></a>影子DOM</h4><h5 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-keyword">const</span> shadowDOM = div.<span class="hljs-title function_">attachShadow</span>(&#123; <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span> &#125;)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>shadowDOM.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;p&gt; test dom &lt;/p&gt;&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="影子DOM槽位"><a href="#影子DOM槽位" class="headerlink" title="影子DOM槽位"></a>影子DOM槽位</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-keyword">const</span> shadowDOM = div.<span class="hljs-title function_">attachShadow</span>(&#123; <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span> &#125;)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;p&gt;Foo&lt;/p&gt;&lt;p slot=&quot;bar&quot;&gt;Bar&lt;/p&gt;&#x27;</span><br>shadowDOM.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;bar&quot; &gt; &lt;slot&gt;&lt;/slot&gt; &lt;slot name=&quot;bar&quot;&gt;&lt;/slot&gt;&lt;/div&gt;&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FooElement</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">HTMLDivElement</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">attachShadow</span>(&#123; <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span> &#125;)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shadowRoot</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;p&gt;I am inside a custom element!&lt;/p&gt;&#x27;</span><br>    &#125;<br>    <span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 将自定义元素添加到DOM中时调用</span><br><br>    &#125;<br>    <span class="hljs-title function_">disconnectedCallback</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 将自定义元素从DOM中移除时调用</span><br><br>    &#125;<br>    <span class="hljs-title function_">attributeChangedCallback</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 在每次可观察属性的值发生变化时调用。在元素实例初始化时，初始值的定义也算一次变化</span><br><br>    &#125;<br>    <span class="hljs-title function_">adoptedCallback</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//</span><br><br>    &#125;<br>&#125;<br>customElements.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;x-foo&#x27;</span>, <span class="hljs-title class_">FooElement</span>, &#123; <span class="hljs-attr">extends</span>: <span class="hljs-string">&#x27;div&#x27;</span> &#125;)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;div is=&quot;x-foo&quot;&gt;&lt;/div&gt;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>表单脚本</title>
    <link href="/2023/04/16/06eb16fbcc83/"/>
    <url>/2023/04/16/06eb16fbcc83/</url>
    
    <content type="html"><![CDATA[<h2 id="表单脚本"><a href="#表单脚本" class="headerlink" title="表单脚本"></a>表单脚本</h2><h3 id="表单基础"><a href="#表单基础" class="headerlink" title="表单基础"></a>表单基础</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;form1&#x27;</span>)<br>form.<span class="hljs-property">acceptCharset</span> <span class="hljs-comment">// 服务器可以接受的字符集 ，等价于HTML的accept-charset属性</span><br>form.<span class="hljs-property">action</span> <span class="hljs-comment">// 请求的URL</span><br>form.<span class="hljs-property">elements</span> <span class="hljs-comment">// 表单中所有控件</span><br>form.<span class="hljs-property">enctype</span> <span class="hljs-comment">// 请求的编码类型</span><br>form.<span class="hljs-property">length</span> <span class="hljs-comment">// 表单中控件的数量</span><br>form.<span class="hljs-property">method</span> <span class="hljs-comment">// HTTP请求的方法类型</span><br>form.<span class="hljs-property">name</span> <span class="hljs-comment">// 表单的名字</span><br>form.<span class="hljs-title function_">reset</span>() <span class="hljs-comment">// 把表单字段重置为各自的默认值</span><br>form.<span class="hljs-title function_">submit</span>() <span class="hljs-comment">// 提交表单</span><br>form.<span class="hljs-property">target</span> <span class="hljs-comment">// 用于发送请求和接受响应的窗口的名字</span><br></code></pre></td></tr></table></figure><h4 id="表单字段"><a href="#表单字段" class="headerlink" title="表单字段"></a>表单字段</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> field1 = form.<span class="hljs-property">elements</span>[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">let</span> field2 = form.<span class="hljs-property">elements</span>[<span class="hljs-string">&#x27;test&#x27;</span>]<br><span class="hljs-keyword">let</span> fieldCount = form.<span class="hljs-property">elements</span>.<span class="hljs-property">length</span><br></code></pre></td></tr></table></figure><h5 id="表单字段的公共事件"><a href="#表单字段的公共事件" class="headerlink" title="表单字段的公共事件"></a>表单字段的公共事件</h5><p>change: 在&lt;input&gt;和&lt;textarea&gt;元素的value发生变化且失去焦点时触发，或者在&lt;select&gt;元素选中项发生变化时触发</p><h3 id="文本框编程"><a href="#文本框编程" class="headerlink" title="文本框编程"></a>文本框编程</h3><h4 id="输入过滤"><a href="#输入过滤" class="headerlink" title="输入过滤"></a>输入过滤</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 屏蔽非数字字符</span><br>textbox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/\d/</span>.<span class="hljs-title function_">test</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(event.<span class="hljs-property">charCode</span>)) &amp;&amp; event.<span class="hljs-property">charCode</span> &gt; <span class="hljs-number">9</span> &amp;&amp; !e.<span class="hljs-property">ctrlKey</span>) &#123;<br>        e.<span class="hljs-title function_">preventDefault</span>()<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="富文本编辑"><a href="#富文本编辑" class="headerlink" title="富文本编辑"></a>富文本编辑</h3><h4 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;editable&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;richedit&quot;</span> <span class="hljs-attr">contenteditable</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="与富文本交互"><a href="#与富文本交互" class="headerlink" title="与富文本交互"></a>与富文本交互</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 切换粗体文本样式</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;bold&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动画与canvas图形</title>
    <link href="/2023/04/15/ea2596e064c2/"/>
    <url>/2023/04/15/ea2596e064c2/</url>
    
    <content type="html"><![CDATA[<h2 id="动画与canvas图形"><a href="#动画与canvas图形" class="headerlink" title="动画与canvas图形"></a>动画与canvas图形</h2><h3 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">rafThrottle</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> lock = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">if</span> (lock) <span class="hljs-keyword">return</span><br>        lock = <span class="hljs-literal">true</span><br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-function">(<span class="hljs-params">time</span>) =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>            lock = <span class="hljs-literal">false</span><br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> requestID = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;repaint&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(requestID)<br></code></pre></td></tr></table></figure><h3 id="基本的画布功能"><a href="#基本的画布功能" class="headerlink" title="基本的画布功能"></a>基本的画布功能</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将canvas转为图片显示</span><br><span class="hljs-keyword">let</span> drawing = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;drawing&#x27;</span>)<br><span class="hljs-keyword">let</span> imgURL = drawing.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&#x27;image/png&#x27;</span>)<br><span class="hljs-keyword">let</span> image = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br>image.<span class="hljs-property">src</span> = imgURL<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(image)<br></code></pre></td></tr></table></figure><h3 id="2D绘图上下文"><a href="#2D绘图上下文" class="headerlink" title="2D绘图上下文"></a>2D绘图上下文</h3><h4 id="填充和描边"><a href="#填充和描边" class="headerlink" title="填充和描边"></a>填充和描边</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> drawing = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;drawing&#x27;</span>)<br><span class="hljs-keyword">let</span> context = drawing.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)<br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;red&#x27;</span><br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#0000ff&#x27;</span> <span class="hljs-comment">// 可以是字符串表示颜色、图案对象和渐变对象</span><br></code></pre></td></tr></table></figure><h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#0000ff&#x27;</span><br>context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>) <span class="hljs-comment">// 填充矩形</span><br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;#ff0000&#x27;</span><br>context.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>) <span class="hljs-comment">// 描边矩形框</span><br><br>context.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>) <span class="hljs-comment">// 擦除一个矩形区域</span><br></code></pre></td></tr></table></figure><h4 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h4><p>必须首先调用context.beginPath()表示开始绘制新路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">context.<span class="hljs-title function_">beginPath</span>()<br>context.<span class="hljs-title function_">arc</span>(x, y, radius, startAngle, endAngle, counterclockwise) <span class="hljs-comment">// 绘制弧线，最后一个参数表示是否逆时针计算起始角度和结束角度（默认顺时针）</span><br>context.<span class="hljs-title function_">arcTo</span>(x1, y1, x2, y2, radius) <span class="hljs-comment">// 以给定半径，经由(x1, y1)绘制一条从上一点到(x2, y2)的弧线</span><br>context.<span class="hljs-title function_">bezierCurveTo</span>(c1x, c1y, c2x, c2y, x, y) <span class="hljs-comment">// 以(c1x, c1y)和(c2x, c2y)为控制点，绘制一条从上一点到(x, y)的弧线（三次贝塞尔曲线）</span><br>context.<span class="hljs-title function_">quadraticCurveTo</span>(cx, cy, x, y) <span class="hljs-comment">// 以(cx, cy)为控制点，绘制一条从上一点到(x, y)的弧线（二次贝塞尔曲线）</span><br>context.<span class="hljs-title function_">lineTo</span>(x, y) <span class="hljs-comment">// 绘制一条从上一点到(x, y)的直线</span><br>context.<span class="hljs-title function_">moveTo</span>(x, y) <span class="hljs-comment">// 不绘制线条，只把绘制光标移动到(x, y)</span><br>context.<span class="hljs-title function_">rect</span>(x, y, width, height) <span class="hljs-comment">// 以给定宽度和高度绘制一个矩形，创建的是一条路径，不是图形</span><br></code></pre></td></tr></table></figure><p>创建路径之后，可以调用closePath()方法绘制一条返回起点的线，或者调用fill()、stroke()方法来画路径</p><h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">context.<span class="hljs-property">font</span> = <span class="hljs-string">&#x27;bold 14px Arial&#x27;</span> <span class="hljs-comment">// css指定的字体样式</span><br>context.<span class="hljs-property">textAlign</span> = <span class="hljs-string">&#x27;start&#x27;</span> <span class="hljs-comment">// 文本的对齐方式</span><br>context.<span class="hljs-property">textBaseLine</span> = <span class="hljs-string">&#x27;top&#x27;</span> <span class="hljs-comment">// 指定文本的基线</span><br>context.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&#x27;22&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">20</span>) <span class="hljs-comment">// 渲染文本，模拟网页中渲染</span><br>context.<span class="hljs-title function_">strokeText</span>(<span class="hljs-string">&#x27;33&#x27;</span>, <span class="hljs-number">200</span>, <span class="hljs-number">20</span>) <span class="hljs-comment">// 描画文本，中间空心</span><br>context.<span class="hljs-title function_">measureText</span>(<span class="hljs-string">&#x27;helloworld&#x27;</span>) <span class="hljs-comment">// 度量文本宽度</span><br></code></pre></td></tr></table></figure><h4 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">context.<span class="hljs-title function_">rotate</span>(angle) <span class="hljs-comment">// 围绕原点把图像旋转angle弧度</span><br>context.<span class="hljs-title function_">scale</span>(scaleX, scaleY) <span class="hljs-comment">// 通过在x轴乘以scaleX、在y轴乘以scaleY来缩放图像</span><br>context.<span class="hljs-title function_">translate</span>(x, y) <span class="hljs-comment">// 把原点移动到(x, y)</span><br>context.<span class="hljs-title function_">transform</span>(m1_1, m1_2, m2_1, m2_2, dx, dy) <span class="hljs-comment">// 通过矩阵乘法直接修改矩阵</span><br>context.<span class="hljs-title function_">setTransform</span>(m1_1, m1_2, m2_1, m2_2, dx, dy) <span class="hljs-comment">// 把矩阵重置为默认值，再以传入的参数调用transform()</span><br><br>context.<span class="hljs-title function_">save</span>() <span class="hljs-comment">// 保存应用到绘图上下文的设置和变换</span><br>context.<span class="hljs-title function_">restore</span>() <span class="hljs-comment">// 恢复之前的绘图上下文设置</span><br></code></pre></td></tr></table></figure><h4 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> image = <span class="hljs-variable language_">document</span>.<span class="hljs-property">image</span>[<span class="hljs-number">0</span>]<br>context.<span class="hljs-title function_">drawImage</span>(image, dx, dy)<br>context.<span class="hljs-title function_">drawImage</span>(image, dx, dy, dWidth, dHeight)<br>context.<span class="hljs-title function_">drawImage</span>(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)<br></code></pre></td></tr></table></figure><h4 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">context.<span class="hljs-property">shadowColor</span> = <span class="hljs-string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span> <span class="hljs-comment">// css颜色值，表示要绘制的阴影颜色</span><br>context.<span class="hljs-property">shadowOffsetX</span> = <span class="hljs-number">5</span> <span class="hljs-comment">// 阴影相对于形状或路径的x坐标的偏移量</span><br>context.<span class="hljs-property">shadowOffsetY</span> = <span class="hljs-number">5</span> <span class="hljs-comment">// 阴影相对于形状或路径的y坐标的偏移量</span><br>context.<span class="hljs-property">shadowBlur</span> = <span class="hljs-number">5</span> <span class="hljs-comment">// 像素，表示阴影的模糊量</span><br></code></pre></td></tr></table></figure><h4 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> gradient = context.<span class="hljs-title function_">createLinearGradient</span>(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>)<br>gradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;white&#x27;</span>)<br>gradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;black&#x27;</span>)<br>context.<span class="hljs-property">fillStyle</span> = gradient<br>context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>)<br><br>gradient = context.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">55</span>, <span class="hljs-number">55</span>, <span class="hljs-number">10</span>, <span class="hljs-number">55</span>, <span class="hljs-number">55</span>, <span class="hljs-number">20</span>) <span class="hljs-comment">// 圆柱体的两个表面</span><br></code></pre></td></tr></table></figure><h4 id="图案"><a href="#图案" class="headerlink" title="图案"></a>图案</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> image = <span class="hljs-variable language_">document</span>.<span class="hljs-property">images</span>[<span class="hljs-number">0</span>]<br>pattern = context.<span class="hljs-title function_">createPattern</span>(image, <span class="hljs-string">&#x27;repeat&#x27;</span>) <span class="hljs-comment">// 也可以接受video元素或者canvas元素</span><br>context.<span class="hljs-property">fillStyle</span> = pattern<br>context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">150</span>, <span class="hljs-number">150</span>)<br></code></pre></td></tr></table></figure><h4 id="图像数据"><a href="#图像数据" class="headerlink" title="图像数据"></a>图像数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> imageData = context.<span class="hljs-title function_">getImageData</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">50</span>, <span class="hljs-number">150</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(imageData.<span class="hljs-property">width</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(imageData.<span class="hljs-property">height</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(imageData.<span class="hljs-property">data</span>)<br><span class="hljs-comment">// 每个像素在data数组中都由4个值表示，分别代表红、绿、蓝和透明度值</span><br>red =  data[<span class="hljs-number">0</span>]<br>green = data[<span class="hljs-number">1</span>]<br>blue = data[<span class="hljs-number">2</span>]<br>alpha = data[<span class="hljs-number">3</span>]<br>context.<span class="hljs-title function_">putImageData</span>(imageData, dx, dy)<br></code></pre></td></tr></table></figure><h4 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 修改全局透明度</span><br>context.<span class="hljs-property">globalAlpha</span> = <span class="hljs-number">0.5</span><br><span class="hljs-comment">// 新绘制的形状如何与上下文已有的形状融合</span><br>context.<span class="hljs-property">globalCompositionOperation</span> = <span class="hljs-string">&#x27;source-over&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事件</title>
    <link href="/2023/04/11/684f339606f5/"/>
    <url>/2023/04/11/684f339606f5/</url>
    
    <content type="html"><![CDATA[<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p>事件被定义为从最具体的元素开始触发，向上传播至没有那么具体的元素</p><h4 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h4><p>最不具体的节点应该最先收到事件，而具体的节点应该最后收到事件</p><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myBtn&#x27;</span>)<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;propagation trigger&#x27;</span>)<br>&#125;)<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;capture trigger&#x27;</span>)<br>&#125;, <span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h4 id="DOM事件对象"><a href="#DOM事件对象" class="headerlink" title="DOM事件对象"></a>DOM事件对象</h4><h5 id="eventPhase"><a href="#eventPhase" class="headerlink" title="eventPhase"></a>eventPhase</h5><ul><li>1表示捕获阶段</li><li>2表示到达目标 此时target和currentTarget相等</li><li>3表示冒泡阶段</li></ul><h5 id="stopPropagation和stopImmediatePropagation"><a href="#stopPropagation和stopImmediatePropagation" class="headerlink" title="stopPropagation和stopImmediatePropagation"></a>stopPropagation和stopImmediatePropagation</h5><p>stopImmediatePropagation不仅阻止父级节点事件的触发，同时还阻止当前元素，同事件类型的触发</p><p>stopPropagation阻止父级节点事件的触发</p><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><h4 id="用户界面事件"><a href="#用户界面事件" class="headerlink" title="用户界面事件"></a>用户界面事件</h4><h5 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>    image.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Image loaded&#x27;</span>)<br>    &#125;)<br>    image.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;smile.gif&#x27;</span> <span class="hljs-comment">// 下载图片并不一定需要将img元素添加到文档，只要设置了src属性，就会立即开始下载</span><br><br>    <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>    script.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script loaded&#x27;</span>)<br>    &#125;)<br>    script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;example.js&#x27;</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script) <span class="hljs-comment">// 下载javascript文件必须同时指定src属性，并把script元素添加到文档，才会开始下载</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="resize事件"><a href="#resize事件" class="headerlink" title="resize事件"></a>resize事件</h5><p>默认窗口缩放超过1px时触发resize事件</p><h4 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h4><p>focusin和focusout分别是focus和blue的冒泡版本</p><p>当焦点从页面的一个元素移动到另一个元素时：</p><ul><li>focusout在失去焦点的元素上触发</li><li>focusin在获得焦点的元素上触发</li><li>blur在失去焦点的元素上触发</li><li>focus在获得焦点的元素上触发</li></ul><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 客户端坐标</span><br>event.<span class="hljs-property">clientX</span><br>event.<span class="hljs-property">clientY</span><br><span class="hljs-comment">// 页面坐标，当没有滚动时，与客户端坐标相同</span><br>event.<span class="hljs-property">pageX</span><br>event.<span class="hljs-property">pageY</span><br><span class="hljs-comment">// 屏幕坐标</span><br>event.<span class="hljs-property">screenX</span><br>event.<span class="hljs-property">screenY</span><br><span class="hljs-comment">// 鼠标按键</span><br>event.<span class="hljs-property">button</span> <span class="hljs-comment">// 0表示鼠标左键，1表示鼠标中键，2表示鼠标右键</span><br></code></pre></td></tr></table></figure><h4 id="HTML5事件"><a href="#HTML5事件" class="headerlink" title="HTML5事件"></a>HTML5事件</h4><h5 id="DOMContentLoaded事件"><a href="#DOMContentLoaded事件" class="headerlink" title="DOMContentLoaded事件"></a>DOMContentLoaded事件</h5><p>window的load事件会在页面完全加载后触发，需要等待外部资源的加载完成，而DOMContentLoaded事件会在DOM树构建完成后立即触发，不需要等待外部资源的加载</p><h5 id="hashchange事件"><a href="#hashchange事件" class="headerlink" title="hashchange事件"></a>hashchange事件</h5><p>当URL散列值发生变化时通知开发者，必须添加给window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;hashchange&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Old URL: <span class="hljs-subst">$&#123;event.oldURL&#125;</span>, New URL: <span class="hljs-subst">$&#123;event.newURL&#125;</span>`</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location.<span class="hljs-property">hash</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="内存和性能"><a href="#内存和性能" class="headerlink" title="内存和性能"></a>内存和性能</h3><p>事件委托和删除事件处理程序</p><p>给所有元素共同的祖先节点添加一个事件处理程序</p><ul><li>document对象随时可用</li><li>减少整个页面所需的内存，提升整体性能</li></ul><h3 id="模拟事件"><a href="#模拟事件" class="headerlink" title="模拟事件"></a>模拟事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> event = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&#x27;CustomEvent&#x27;</span>)<br><span class="hljs-comment">// type 要触发的事件类型</span><br><span class="hljs-comment">// bubbles 表示事件是否冒泡</span><br><span class="hljs-comment">// cancelable 表示事件是否可以取消</span><br><span class="hljs-comment">// detail 任意值</span><br>event.<span class="hljs-title function_">initCustomEvent</span>(<span class="hljs-string">&#x27;myevent&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)<br>div.<span class="hljs-title function_">dispatchEvent</span>(event)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM2和DOM3</title>
    <link href="/2023/04/08/36e25df66678/"/>
    <url>/2023/04/08/36e25df66678/</url>
    
    <content type="html"><![CDATA[<h2 id="DOM2和DOM3"><a href="#DOM2和DOM3" class="headerlink" title="DOM2和DOM3"></a>DOM2和DOM3</h2><h3 id="DOM的演进"><a href="#DOM的演进" class="headerlink" title="DOM的演进"></a>DOM的演进</h3><h4 id="document"><a href="#document" class="headerlink" title="document"></a>document</h4><p>domcument属性defaultView，指向当前文档的窗口</p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> div1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>div1.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>)<br><span class="hljs-keyword">let</span> div2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>div2.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div1.<span class="hljs-title function_">isSameNode</span>(div1)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div1.<span class="hljs-title function_">isEqualNode</span>(div2)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div1.<span class="hljs-title function_">isSameNode</span>(div2)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><h4 id="存取元素样式"><a href="#存取元素样式" class="headerlink" title="存取元素样式"></a>存取元素样式</h4><p>css属性float，在javascript中需要通过style.cssFloat获取</p><h4 id="元素尺寸"><a href="#元素尺寸" class="headerlink" title="元素尺寸"></a>元素尺寸</h4><ul><li>偏移尺寸 包含所有内边距、滚动条和边框 offsetHeight和offsetWidth包含了滚动条，offsetLeft、offsetTop</li><li>客户端尺寸 包含元素内容和内边距 clientHeight、clientWidth</li><li>滚动尺寸 scrollHeight、scrollWidth、scrollLeft和scrollTop</li><li>元素尺寸 getBoundingClientRect bottom和right</li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="NodeIterator"><a href="#NodeIterator" class="headerlink" title="NodeIterator"></a>NodeIterator</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> filter = <span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-keyword">return</span> node.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&#x27;p&#x27;</span> ? <span class="hljs-title class_">NodeFilter</span>.<span class="hljs-property">FILTER_ACCEPT</span> : <span class="hljs-title class_">NodeFilter</span>.<span class="hljs-property">FILTER_SKIP</span><br>&#125;<br><span class="hljs-comment">// 四个参数：作为遍历根节点的节点；数值代码，应该访问哪些节点；过滤器，是否跳过某些节点；是否扩展实体引用，html中默认为false</span><br><span class="hljs-keyword">let</span> iterator = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createNodeIterator</span>(root, <span class="hljs-title class_">NodeFilter</span>.<span class="hljs-property">SHOW_ELEMENT</span>, filter, <span class="hljs-literal">false</span>)<br><span class="hljs-keyword">let</span> node = iterator.<span class="hljs-title function_">nextNode</span>()<br><span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>    node  = iterator.<span class="hljs-title function_">nextNode</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TreeWalker"><a href="#TreeWalker" class="headerlink" title="TreeWalker"></a>TreeWalker</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> filter = <span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-keyword">return</span> node.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&#x27;p&#x27;</span> ? <span class="hljs-title class_">NodeFilter</span>.<span class="hljs-property">FILTER_ACCEPT</span> : <span class="hljs-title class_">NodeFilter</span>.<span class="hljs-property">FILTER_SKIP</span><br>&#125;<br><br><span class="hljs-keyword">let</span> walker = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTreeWalker</span>(root, <span class="hljs-title class_">NodeFilter</span>.<span class="hljs-property">SHOW_ELEMENT</span>, filter, <span class="hljs-literal">false</span>)<br>walker.<span class="hljs-title function_">firstChild</span>()<br>walker.<span class="hljs-title function_">nextSibling</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM扩展</title>
    <link href="/2023/04/05/a800d0931acf/"/>
    <url>/2023/04/05/a800d0931acf/</url>
    
    <content type="html"><![CDATA[<h2 id="DOM扩展"><a href="#DOM扩展" class="headerlink" title="DOM扩展"></a>DOM扩展</h2><h3 id="Selectors-API"><a href="#Selectors-API" class="headerlink" title="Selectors API"></a>Selectors API</h3><ul><li>querySelector 未找到则返回null</li><li>querySelectorAll 未找到则返回空的NodeList实例（静态的NodeList，不是实时的）</li></ul><h3 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h3><p>为了避免将元素间的空格当成空白节点，导致childNodes和firstChild属性上的差异，定义了新的属性childElementCount、firstElementChild、previousElementSibling</p><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><h4 id="CSS类扩展"><a href="#CSS类扩展" class="headerlink" title="CSS类扩展"></a>CSS类扩展</h4><h5 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h5><p>根据类名，查找元素</p><h5 id="classList属性"><a href="#classList属性" class="headerlink" title="classList属性"></a>classList属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;user&#x27;</span>) <span class="hljs-comment">// 没有则添加，有则删除</span><br></code></pre></td></tr></table></figure><h5 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h5><p>document.activeElement，页面加载完成时会设置为document.body</p><h5 id="自定义数据属性"><a href="#自定义数据属性" class="headerlink" title="自定义数据属性"></a>自定义数据属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;main&quot;</span> data-appId=<span class="hljs-string">&quot;111&quot;</span> data-my-name=<span class="hljs-string">&quot;test&quot;</span>&gt;<br><br>&lt;/div&gt;<br><span class="hljs-keyword">let</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>)<br><span class="hljs-keyword">let</span> appId = div.<span class="hljs-property">dataset</span>.<span class="hljs-property">appId</span><br><span class="hljs-keyword">let</span> myName = div.<span class="hljs-property">dataset</span>.<span class="hljs-property">myName</span><br></code></pre></td></tr></table></figure><h5 id="scrollIntoView"><a href="#scrollIntoView" class="headerlink" title="scrollIntoView"></a>scrollIntoView</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">scrollIntoView</span>()<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">scrollIntoView</span>(<span class="hljs-literal">true</span>, &#123; <span class="hljs-attr">block</span>: <span class="hljs-string">&#x27;start&#x27;</span> &#125;)<br></code></pre></td></tr></table></figure><p>alignToTop</p><ul><li>true 窗口滚动后元素的顶部与视口顶部对齐</li><li>false 窗口滚动后元素的底部与视口底部对齐</li></ul><p>scrollIntoViewOptions</p><ul><li>behavior 定义过渡动画，可取的值为’smooth’和’auto’，默认为’auto’</li><li>block 定义垂直方向的对齐，可取的值为’start’、’center’、’end’和’nearest’，默认为’start’</li><li>inline 定义水平方向的对齐</li></ul><h3 id="专有扩展"><a href="#专有扩展" class="headerlink" title="专有扩展"></a>专有扩展</h3><h4 id="contains方法"><a href="#contains方法" class="headerlink" title="contains方法"></a>contains方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h4><h5 id="innerText属性"><a href="#innerText属性" class="headerlink" title="innerText属性"></a>innerText属性</h5><p>innerText属性对应元素中包含的所有文本内容，无论文本在子树的哪个层级，在读取值时，innerText会按照深度优先的顺序将子树中所有文本节点的值拼接起来</p><p>innerText写入内容时，会移除元素所有的后代并插入一个包含该值的文本节点，同时也会进行编码</p><h5 id="outerText属性"><a href="#outerText属性" class="headerlink" title="outerText属性"></a>outerText属性</h5><p>outerText写入内容时，不仅会移除所有的后代节点，而是替换整个元素</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM</title>
    <link href="/2023/04/05/a888dc065d3a/"/>
    <url>/2023/04/05/a888dc065d3a/</url>
    
    <content type="html"><![CDATA[<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><h4 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h4><p>所有的DOM节点都必须实现Node接口</p><p>每个节点都存在childNodes属性，包含一个NodeList实例</p><p>NodeList不是Array的实例，但是可以像数组一样访问，同时是实时的活动对象，即DOM结构的变化会自动在NodeList中反映出来</p><h5 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h5><ul><li>appendChild</li><li>insertBefore 接受两个参数：要插入的节点和参照节点</li><li>replaceChild 接受两个参数：要插入的节点和要替换的节点</li><li>removeChild 接受一个参数：要移除的节点，被移除的节点会被返回</li></ul><h5 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h5><ul><li>cloneNode 接受一个参数：是否深复制，传入true，进行深复制；addEventListener和直接设置到节点上的属性不会复制(eg: node.test &#x3D; 111)</li><li>normalize 处理文档子树的文本节点：删除空的文本节点和合并相邻的文本节点</li></ul><h4 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h4><h5 id="文档子节点"><a href="#文档子节点" class="headerlink" title="文档子节点"></a>文档子节点</h5><ul><li>document.documentElement 默认指向<strong>html</strong>元素</li><li>document.body 默认指向<strong>body</strong>元素</li><li>document.head 默认指向<strong>head</strong>元素</li></ul><h5 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h5><ul><li>domcument.domain只能设置为URL中包含的值，多个iframe的domain相同时，可以访问对方的Javascript对象</li></ul><h5 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h5><ul><li>getElementById 根据元素id，查找元素</li><li>getElementsByTagName 返回也是一个实时的列表</li><li>getElementsByName 根据元素name，查找元素</li></ul><h3 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h3><h4 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadStyleString</span>(<span class="hljs-params">css</span>) &#123;<br>    <span class="hljs-keyword">let</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>)<br>    style.<span class="hljs-property">stype</span> = <span class="hljs-string">&#x27;text/css&#x27;</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        style.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(css))<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        style.<span class="hljs-property">styleSheet</span>.<span class="hljs-property">cssText</span> = css<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(style)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="MutationObserver接口"><a href="#MutationObserver接口" class="headerlink" title="MutationObserver接口"></a>MutationObserver接口</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">(<span class="hljs-params">mutationRecords</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mutationRecords)<br>&#125;)<br>observer.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>, &#123; <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></figure><p>默认情况下，只要观察的元素没有被垃圾回收，mutationObserver的回调就可以响应DOM变化事件，要提前终止回调，需要调用disconnect，调用之后不仅会停止此后变化事件的回调，同时也会抛弃已经加入任务队列中要异步执行的回调</p><h5 id="复用MutationObserver"><a href="#复用MutationObserver" class="headerlink" title="复用MutationObserver"></a>复用MutationObserver</h5><p>多次调用observe，可以复用一个mutationobserver对象观察多个不用的节点</p><h4 id="观察范围"><a href="#观察范围" class="headerlink" title="观察范围"></a>观察范围</h4><ul><li>观察属性 attributes、attributeFilter</li><li>观察字符数据 characterData</li><li>观察子节点 childList</li><li>观察子树 subtree</li></ul><h4 id="异步回调与记录队列"><a href="#异步回调与记录队列" class="headerlink" title="异步回调与记录队列"></a>异步回调与记录队列</h4><h5 id="记录队列"><a href="#记录队列" class="headerlink" title="记录队列"></a>记录队列</h5><p>每次MutationRecord被添加到MutationObserver的记录队列时，仅当之前没有已排期的微任务回调时，才会将观察者注册的回调作为微任务调度到任务队列上。即虽然dom节点属性变化多次，但是回调函数仍只执行一次</p><h5 id="takeRecords方法"><a href="#takeRecords方法" class="headerlink" title="takeRecords方法"></a>takeRecords方法</h5><p>调用takeRecords方法可以清空记录队列，取出并返回其中所有的MutationRecord实例</p><h4 id="性能、内存与垃圾回收"><a href="#性能、内存与垃圾回收" class="headerlink" title="性能、内存与垃圾回收"></a>性能、内存与垃圾回收</h4><h5 id="MutationObserver的引用"><a href="#MutationObserver的引用" class="headerlink" title="MutationObserver的引用"></a>MutationObserver的引用</h5><p>MutationObserver拥有对目标节点的弱引用，不会妨碍垃圾回收程序回收目标节点，然后目标节点却拥有对MutationObserver的强引用，如果目标节点从DOM中移除，被垃圾回收，则关联的MutationObserver也会被垃圾回收</p><h5 id="MutationRecord的引用"><a href="#MutationRecord的引用" class="headerlink" title="MutationRecord的引用"></a>MutationRecord的引用</h5><p>记录队列中的每个MutationRecord实例至少包含对已有DOM节点的一个引用，如果变化是childList，则会包含多个节点的引用</p><p>如果需要保存某个观察者的完整变化记录，保存这些MutationRecord实例，也就保存了它们引用的节点，会妨碍这些节点被垃圾回收，如果需要尽快释放内存，可以从MutationRecord中提取有用的信息保存到新的对象中，抛弃MutationRecord</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BOM</title>
    <link href="/2023/04/02/201679cb1090/"/>
    <url>/2023/04/02/201679cb1090/</url>
    
    <content type="html"><![CDATA[<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><h4 id="窗口关系"><a href="#窗口关系" class="headerlink" title="窗口关系"></a>窗口关系</h4><ul><li>window.top始终指向最上层窗口</li><li>window.parent始终指向当前窗口的父窗口</li><li>window.self始终指向自身</li></ul><h4 id="窗口位置和像素比"><a href="#窗口位置和像素比" class="headerlink" title="窗口位置和像素比"></a>窗口位置和像素比</h4><ul><li>window.screenLeft、window.screenX表示窗口相对于屏幕左侧的距离</li><li>window.screenTop、window.screenY表示窗口相对于屏幕顶部的距离</li><li>moveTo()和moveBy()，移动窗口的位置</li><li>window.devicePixelRatio表示物理像素与逻辑像素之间的缩放系数</li></ul><h4 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h4><ul><li>innerWidth和outerWidth</li><li>resizeTo和resizeBy缩放到固定的大小</li></ul><h4 id="视口位置"><a href="#视口位置" class="headerlink" title="视口位置"></a>视口位置</h4><ul><li>window.pageXoffset和window.scrollX</li><li>window.pageYoffset和window.scrollY</li><li>scrollTo、scrollBy滚动距离</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(&#123;<br>    <span class="hljs-attr">left</span>: <span class="hljs-number">100</span>,<br>    <span class="hljs-attr">top</span>: <span class="hljs-number">100</span>,<br>    <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;auto&#x27;</span> <span class="hljs-comment">// &#x27;smooth&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.<span class="hljs-property">href</span> <span class="hljs-comment">// &quot;http://www.wrox.com:80/WileyCDA/?q=javascript#contents&quot;</span><br>location.<span class="hljs-property">hash</span> <span class="hljs-comment">// &quot;#contents&quot;</span><br>location.<span class="hljs-property">host</span> <span class="hljs-comment">// &quot;www.wrox.com:80&quot;</span><br>location.<span class="hljs-property">hostname</span> <span class="hljs-comment">// &quot;www.wrox.com&quot;</span><br>location.<span class="hljs-property">pathname</span> <span class="hljs-comment">// &quot;/WileyCDA&quot;</span><br>location.<span class="hljs-property">port</span> <span class="hljs-comment">// &quot;80&quot;</span><br>location.<span class="hljs-property">protocol</span> <span class="hljs-comment">// &quot;http&quot;</span><br>location.<span class="hljs-property">search</span> <span class="hljs-comment">// &quot;?q=javascript&quot;</span><br>location.<span class="hljs-property">origin</span> <span class="hljs-comment">// &quot;http://www.wrox.com&quot;</span><br><span class="hljs-keyword">let</span> qs = <span class="hljs-string">&quot;?q=javascript&quot;</span><br><span class="hljs-keyword">let</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(qs) <span class="hljs-comment">// &quot;q=javascript&quot;</span><br>params.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)<br>params.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// q=javascript&amp;name=test</span><br></code></pre></td></tr></table></figure><h4 id="操作地址"><a href="#操作地址" class="headerlink" title="操作地址"></a>操作地址</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 修改浏览器地址</span><br>location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&quot;http://www.wrox.com&quot;</span>)<br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://www.wrox.com&quot;</span>;<br><span class="hljs-comment">// 除了hash之外，只要修改location的一个属性，就会导致页面重新加载URL，同时浏览器历史记录中会增加相应的记录</span><br>location.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;http://www.wrox.com&quot;</span>) <span class="hljs-comment">// 不会增加历史记录，即不能回到前一页</span><br>location.<span class="hljs-title function_">reload</span>() <span class="hljs-comment">//重新加载页面，已最有效的方式</span><br>location.<span class="hljs-title function_">reload</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 重新加载页面，从服务器加载</span><br></code></pre></td></tr></table></figure><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">history.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>) <span class="hljs-comment">// 后退一页</span><br>history.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 前进一页</span><br>history.<span class="hljs-title function_">back</span>() <span class="hljs-comment">// 后退一页</span><br>history.<span class="hljs-title function_">forward</span>() <span class="hljs-comment">// 前进一页</span><br></code></pre></td></tr></table></figure><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> state = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span> &#125;<br>history.<span class="hljs-title function_">pushState</span>(state, <span class="hljs-string">&#x27;new title&#x27;</span>, <span class="hljs-string">&#x27;baz.html&#x27;</span>) <span class="hljs-comment">// state对象(500kb~1MB)、新状态的标题和（可选的）相对URL</span><br></code></pre></td></tr></table></figure><p>执行pushState后，状态信息会被推送到历史记录，同时浏览器地址栏会改变以反映新的相对URL，浏览器不会向服务器发起请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 点击后退按钮时，触发window上的popstate事件</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;popstate&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> state = event.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">if</span> (state) &#123; <span class="hljs-comment">// 第一个页面加载时状态为null</span><br>        <span class="hljs-title function_">processState</span>(state)<br>    &#125;<br>&#125;)<br>history.<span class="hljs-title function_">replaceState</span>(&#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>&#125;, <span class="hljs-string">&#x27;new title&#x27;</span>) <span class="hljs-comment">// 不会创建历史记录，只会覆盖当前状态</span><br><br></code></pre></td></tr></table></figure><p>state对象中应该只包含可以被序列化的信息，同时在使用HTML5状态管理时，要确保通过pushState()创建的每个“假”URL背后都对应着服务器上一个真实的物理URL，否则单击刷新会导致404错误，所有的SPA框架都必须通过某些配置解决这个问题</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>泛型程序设计</title>
    <link href="/2023/03/26/9cadd44316d9/"/>
    <url>/2023/03/26/9cadd44316d9/</url>
    
    <content type="html"><![CDATA[<h2 id="泛型程序设计"><a href="#泛型程序设计" class="headerlink" title="泛型程序设计"></a>泛型程序设计</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T first;<br>    <span class="hljs-keyword">private</span> T second;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getFrist</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">setFrist</span><span class="hljs-params">(T newValue)</span> &#123;<br>        first = newValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>普通类中定义泛型方法，需要在方法定义的返回值前面加上类型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayAlg</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getMiddle</span><span class="hljs-params">(T a)</span> &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型变量的限定"><a href="#类型变量的限定" class="headerlink" title="类型变量的限定"></a>类型变量的限定</h3><p>如果使用类作为限定，则必须是限定列表中的第一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&gt; T <span class="hljs-title function_">getMiddle</span><span class="hljs-params">(T a)</span> &#123;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型代码和虚拟机"><a href="#泛型代码和虚拟机" class="headerlink" title="泛型代码和虚拟机"></a>泛型代码和虚拟机</h3><h4 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h4><p>原始类型用第一个限定的类型变量来替换，如果没有给定限定符则用Object替换</p><h4 id="翻译泛型方法"><a href="#翻译泛型方法" class="headerlink" title="翻译泛型方法"></a>翻译泛型方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DateInerval</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pair</span>&lt;LocalDate&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecond</span><span class="hljs-params">(LocalDate second)</span> &#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 在类型擦除后变为</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DateInterval</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pair</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecond</span><span class="hljs-params">(LocalDate second)</span> &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-type">DateInterval</span> <span class="hljs-variable">interval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateInterval</span>(...);<br>Pair&lt;LocalDate&gt; pair = interval;<br>pair.setSecond(pair);<br><span class="hljs-comment">// Pair中只有setSecond(Object)，虚拟机用pair引用的对象调用这个方法，因此将会调用DateInterval.setSecond(Object)</span><br><span class="hljs-comment">// 此时会生成桥方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecond</span><span class="hljs-params">(Object second)</span> &#123;<br>    setSecond((Date) second);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="约束和局限"><a href="#约束和局限" class="headerlink" title="约束和局限"></a>约束和局限</h3><ul><li>不能用基本类型实例化类型参数，没有<code>Pair&lt;double&gt;</code></li><li>运行时类型查询只适用于原始类型，<code>getClass()</code>返回Pair.class</li><li>不能创建参数类型化的数组，<code>Pair&lt;String&gt; table = new Pair&lt;&gt;[10]</code></li><li>不能实例化类型变量，<code>new T()</code></li><li>不能构造泛型数组，<code>T[] mm = new T[2]</code></li></ul><h3 id="通配符类型"><a href="#通配符类型" class="headerlink" title="通配符类型"></a>通配符类型</h3><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>子类限定：? extends Employee</p><p>超类限定: ? super Manager</p><p>无限定：?</p>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常、断言和日志</title>
    <link href="/2023/03/19/69efd1704bf5/"/>
    <url>/2023/03/19/69efd1704bf5/</url>
    
    <content type="html"><![CDATA[<h2 id="异常、断言和日志"><a href="#异常、断言和日志" class="headerlink" title="异常、断言和日志"></a>异常、断言和日志</h2><h3 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h3><h4 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h4><center>Java中的异常层次结构</center><pre><code class=" mermaid">classDiagram    Throwable &lt;|-- Error    Throwable &lt;|-- Exception    Exception &lt;|-- IOException    Exception &lt;|-- RuntimeException    class Error    class Exception    class IOException    class RuntimeException</code></pre><h4 id="创建异常类"><a href="#创建异常类" class="headerlink" title="创建异常类"></a>创建异常类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileFormatException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IOException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileFormatException</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileFormatException</span><span class="hljs-params">(String gripe)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gripe)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><h4 id="捕获多个异常"><a href="#捕获多个异常" class="headerlink" title="捕获多个异常"></a>捕获多个异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException | UnknownHostException e) &#123;<br><br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="再次抛出异常与异常链"><a href="#再次抛出异常与异常链" class="headerlink" title="再次抛出异常与异常链"></a>再次抛出异常与异常链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">se</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;datebase error&quot;</span>);<br>    se.initCause(e);<br>    <span class="hljs-keyword">throw</span> se;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="带资源的try语句"><a href="#带资源的try语句" class="headerlink" title="带资源的try语句"></a>带资源的try语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ...) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在try块退出时，会自动调用res.close方法。还可以自定义实现AutoCloseable接口的类，来实现带资源的try语句，资源的关闭顺序是倒序的</p>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口、lambda表达式和内部类</title>
    <link href="/2023/03/18/49da83869ffd/"/>
    <url>/2023/03/18/49da83869ffd/</url>
    
    <content type="html"><![CDATA[<h2 id="接口、lambda表达式和内部类"><a href="#接口、lambda表达式和内部类" class="headerlink" title="接口、lambda表达式和内部类"></a>接口、lambda表达式和内部类</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>接口中的所有方法默认属于public，在声明方法时，不需要提供关键字public</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>接口不是类，不能使用new运算符实例化</li><li>可以声明接口的变量，同时变量必须引用一个实现了接口的类对象</li><li>可以使用instanceof检测一个对象是否实现了某个接口</li><li>接口中定义变量，默认为public static final</li></ul><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>java8后，可以在接口中增加静态方法</p><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(T other)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要用于“接口演化”，如果给接口添加了一个非默认方法，则必须修改接口实现类；如果是默认方法，则不需要修改实现类，同时在实现类调用新增加的方法，将自动调用接口中的默认实现</p><h4 id="默认方法冲突"><a href="#默认方法冲突" class="headerlink" title="默认方法冲突"></a>默认方法冲突</h4><ul><li>超类优先：一个类扩展了一个超类，同时实现了一个接口，并从超类和接口继承了相同的方法</li><li>接口冲突：一个类实现了两个接口，接口中存在同名的默认方法，则必须在实现类中实现该方法，来解决冲突</li></ul><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">(String first, String second) -&gt; first.length() - second.length();<br><span class="hljs-comment">// 如果可以推断出参数类型，则可以忽略类型</span><br>Comparator&lt;String&gt; cmp = (first, second) -&gt; first.length() - second.length();<br><span class="hljs-comment">// 如果没有参数，仍要提供空括号</span><br>() -&gt; &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; i &gt;= <span class="hljs-number">0</span>; i--) System.out.println(i);&#125;;<br></code></pre></td></tr></table></figure><p>如果lambda表达式只在某些分支返回一个值，而其它分支不返回值，是不合法的</p><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p>object::instanceMethod  -  System.out::println等价于x -&gt; System.out.println(x)</p><p>Class::staticMethod  -  Math::pow等价于(x, y) -&gt; Math.pow(x, y)</p><p>Class::instanceMethod  -  String::compareToIgnoreCase等价于(x, y) -&gt; x.compareToIgnoreCase(y)</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TalkingClock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> beep;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> interval, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> beep)</span> &#123;<br>        <span class="hljs-type">ActionListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimePrinter</span>(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>(interval, listener);<br>        t.start();<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimePrinter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span> &#123;<br>        <span class="hljs-keyword">private</span> TalkingClock outer;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">TimePrinter</span><span class="hljs-params">(TalkingClock outer)</span> &#123;<br>            <span class="hljs-built_in">this</span>.outer = outer;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>            <span class="hljs-keyword">if</span> (outer.beep) &#123;<br>                System.out.println(<span class="hljs-string">&quot;beep&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这种情况下编译后，会在<strong>TalkingClock</strong>添加静态方法access$000,对于<strong>if(outer.beep)<strong>的访问会变为</strong>if(TalkingClock.access$000)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimePrinter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>            <span class="hljs-keyword">if</span> (beep) &#123;<br>                System.out.println(<span class="hljs-string">&quot;beep&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况下编译后，在生成的<strong>TalkingClock$1TimePrinter</strong>中会存在<strong>val$beep</strong>变量，在调用构造函数时，会传入<strong>beep</strong>，并存储在<strong>val$beep</strong>中，之后则访问局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] counter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dates.length; i++) &#123;<br>    dates[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Date other)</span> &#123;<br>            counter[<span class="hljs-number">0</span>]++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.compareTo(other);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想更新一个在封闭作用域中的值，可以采用数组的方式，因为普通的变量必须是final，无法进行更改</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> interval, <span class="hljs-type">int</span> beep)</span> &#123;<br>    <span class="hljs-type">ActionListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>            <span class="hljs-keyword">if</span> (beep) &#123;<br>                System.out.println(<span class="hljs-string">&quot;beep&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-type">Timer</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>(interval, listener);<br>    t.start();<br>    <span class="hljs-comment">// 或者使用Lambda的方式</span><br>    <span class="hljs-type">Timer</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>(interval, event -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (beep) &#123;<br>            System.out.println(<span class="hljs-string">&quot;beep&quot;</span>);<br>        &#125;<br>    &#125;);<br>    t.start();<br>&#125;<br></code></pre></td></tr></table></figure><p>对于静态方法，如果需要包含当前类的类名，则应该使用如下表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()&#123;&#125;.getClass().getEnclosingClass() <span class="hljs-comment">// gets class of static method</span><br></code></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>静态内部类的对象没有对外围类对象的引用特权，其它和普通的内部类一致</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TraceHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object target;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TraceHandler</span><span class="hljs-params">(Object t)</span> &#123;<br>        target = t;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method m, Object[] args)</span> &#123;<br>        <span class="hljs-keyword">return</span> m.invoke(target, args);<br>    &#125;<br>&#125;<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TraceHandler</span>(value);<br>Class[] interfaces = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Comparable.class &#125;;<br><span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.nenProxyInstance(<span class="hljs-literal">null</span>, interfaces, handler);<br></code></pre></td></tr></table></figure><h4 id="代理类特性"><a href="#代理类特性" class="headerlink" title="代理类特性"></a>代理类特性</h4><ul><li>所有的代理类都覆盖了Object类中的toString，equals和hashCode方法</li><li>对于特定的类加载器和接口数组调用两次newProxyInstance方法，只能得到同一个类的两个对象 <strong>Class proxyClass &#x3D; Proxy.getProxyClass(null, interfaces)</strong></li><li>代理类一定是public和final的</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>继承</title>
    <link href="/2023/03/15/f90616b0a613/"/>
    <url>/2023/03/15/f90616b0a613/</url>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h3><h4 id="子类构造器"><a href="#子类构造器" class="headerlink" title="子类构造器"></a>子类构造器</h4><p>如果子类的构造器没有显示地调用超类的构造器，则将自动调用超类默认（没有参数）的构造器</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>静态绑定：private方法、static方法、final方法或者构造器，编译器可以准确知道调用哪个方法</p><p>动态绑定：调用的方法依赖于隐式参数的实际类型，调用方法时需要进行搜索，时间开销比较大</p><h4 id="阻止继承"><a href="#阻止继承" class="headerlink" title="阻止继承"></a>阻止继承</h4><p>定义类或方法时，使用final，来阻止类被继承，阻止方法被覆盖</p><h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><table><thead><tr><th align="center">private</th><th align="center">public</th><th align="center">protected</th><th align="center">默认</th></tr></thead><tbody><tr><td align="center">仅对本类可见</td><td align="center">对所有类可见</td><td align="center">对本包和所有子类可见</td><td align="center">对本包可见</td></tr></tbody></table><h4 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Employee otherObject)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == otherObject) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (otherObject == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (getClass() != otherObject.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Employee) otherObject;<br>        <span class="hljs-keyword">return</span> Objects.equals(field, other.field);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Objects.hashCode</span><br>    <span class="hljs-keyword">return</span> Objects.hash(name, salary);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Size</span> &#123;<br>    SMALL(<span class="hljs-string">&quot;S&quot;</span>), MEDIUM(<span class="hljs-string">&quot;M&quot;</span>)<br>&#125;<br><span class="hljs-type">Size</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Enum.valueOf(Size.class, <span class="hljs-string">&quot;SMALL&quot;</span>);<br>Size[] values = Size.values();<br>Size.MEDINUM.ordinal() <span class="hljs-comment">// enum枚举中常量的位置  1</span><br></code></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.Random&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> cls.newInstance();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="getFields和getDeclaredFields"><a href="#getFields和getDeclaredFields" class="headerlink" title="getFields和getDeclaredFields"></a>getFields和getDeclaredFields</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> publicField;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> protectedField;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> privateField;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> publicField2;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> protectedField2;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> privateField2;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMain2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Field[] fields = Child.class.getFields();<br>        fields[<span class="hljs-number">0</span>].setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">//</span><br>        Child.class.getDeclaredMethod()<br>        System.out.println(<span class="hljs-string">&quot;getFields(): &quot;</span> + Arrays.toString(fields));<br>        <span class="hljs-comment">// getFields(): [public int Child.publicField2, public int Parent.publicField]</span><br>        fields = Child.class.getDeclaredFields();<br>        System.out.println(<span class="hljs-string">&quot;getDeclaredFields(): &quot;</span> + Arrays.toString(fields));<br>        <span class="hljs-comment">// getDeclaredFields(): [public int Child.publicField2, protected int Child.protectedField2, private int Child.privateField2]</span><br>        fields = Child.class.getSuperclass().getDeclaredFields();<br>        System.out.println(<span class="hljs-string">&quot;parent getDeclaredFields(): &quot;</span> + Arrays.toString(fields));<br>        <span class="hljs-comment">// parent getDeclaredFields(): [public int Parent.publicField, protected int Parent.protectedField, private int Parent.privateField]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反射调用方法"><a href="#反射调用方法" class="headerlink" title="反射调用方法"></a>反射调用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> Employee.class.getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) m1.invoke(herry); <span class="hljs-comment">// 调用实例方法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name2</span> <span class="hljs-operator">=</span> (String) m1.invoke(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 调用静态方法</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象与类</title>
    <link href="/2023/03/12/e42ac6b89405/"/>
    <url>/2023/03/12/e42ac6b89405/</url>
    
    <content type="html"><![CDATA[<h2 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h2><h3 id="面向对象程序设计概述"><a href="#面向对象程序设计概述" class="headerlink" title="面向对象程序设计概述"></a>面向对象程序设计概述</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>使用OOP，需要弄清除对象的三个主要特性</p><ul><li>对象的行为 —- 可以对对象施加哪些操作、哪些方法</li><li>对象的状态 —- 施加那些方法时，对象如何响应</li><li>对象标识 —- 如何辨别具有相同行为与状态的不同对象</li></ul><h4 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h4><ul><li>依赖（”uses-a”）</li><li>聚合（”has-a”）</li><li>继承（”is-a”）</li></ul><p><img src="/2023/03/12/e42ac6b89405/uml-symbol.png" alt="类关系的UML符号"></p><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><p>Java程序设计语言总是采用按值调用的方式，方法得到的是所有参数值的拷贝</p><h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>方法名和参数类型，构成了方法的签名。多个方法有相同的名字、不同的参数，就产生了重载<br>返回类型不是方法签名的一部分，因此不能有两个名字相同、参数类型相同，但返回类型不同的方法</p>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的基本程序设计结构</title>
    <link href="/2023/03/11/89f580576515/"/>
    <url>/2023/03/11/89f580576515/</url>
    
    <content type="html"><![CDATA[<h2 id="Java的基本程序设计结构"><a href="#Java的基本程序设计结构" class="headerlink" title="Java的基本程序设计结构"></a>Java的基本程序设计结构</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th align="center">类型</th><th align="center">byte</th><th align="center">short</th><th align="center">int</th><th align="center">long</th><th align="center">float</th><th align="center">double</th><th align="center">char</th></tr></thead><tbody><tr><td align="center">存储大小</td><td align="center">1字节</td><td align="center">2字节</td><td align="center">4字节</td><td align="center">8字节</td><td align="center">4字节</td><td align="center">8字节</td><td align="center">2字节</td></tr></tbody></table><h4 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h4><p>char类型使用的是<strong>UTF-16</strong>编码，每个字符使用16位表示，通常称为代码单元（code unit），辅助字符采用一对连续的代码单元进行编码，通常称为替代区域（surrogate area）</p><h5 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h5><p>第一个代码级别称为基本的多语言级别，码点从U+0000到U+FFFF，其余的16个级别码点从U+10000到U+10FFFF，约2^20个码位，为了对其进行编码，其做法是将其前10位映射到U+D800-U+DBFF，后10位映射到U+DC00-DFFF。在读取字节时，按照两个字节读取，如果取到的值的范围在代理区，则说明这是一个辅助字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] utf16encode(String str) &#123;<br>    <span class="hljs-type">int</span>[] codePoints = str.codePoints().toArray();<br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[codePoints.length * <span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> point : codePoints) &#123;<br>        <span class="hljs-keyword">if</span> (point &lt; <span class="hljs-number">0xFFFF</span>) &#123;<br>            bytes[index++] = (<span class="hljs-type">byte</span>) (point &gt;&gt;&gt; <span class="hljs-number">8</span>);<br>            bytes[index++] = (<span class="hljs-type">byte</span>) (point &amp; <span class="hljs-number">0xFF</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">highSurrogate</span> <span class="hljs-operator">=</span> ((point - <span class="hljs-number">0x10000</span>) &gt;&gt;&gt; <span class="hljs-number">10</span>) + <span class="hljs-number">0xD800</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">lowSurrogate</span> <span class="hljs-operator">=</span> point &amp; <span class="hljs-number">0x3FF</span>;<br>            bytes[index++] = (<span class="hljs-type">byte</span>) (highSurrogate &gt;&gt;&gt; <span class="hljs-number">8</span>);<br>            bytes[index++] = (<span class="hljs-type">byte</span>) (highSurrogate &amp; <span class="hljs-number">0xFF</span>);<br>            bytes[index++] = (<span class="hljs-type">byte</span>) (lowSurrogate &gt;&gt;&gt; <span class="hljs-number">8</span>);<br>            bytes[index++] = (<span class="hljs-type">byte</span>) (lowSurrogate &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> bytes;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h4><p>需要看具体的虚拟机实现，确定是占1个字节或者4个字节，对于oracle的Java虚拟机实现，boolean数组被编码为byte数组，每个boolean使用1个字节，单独使用boolean时，被编码为int，占用4个字节</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><strong>Math.floorMod</strong>是为了解决有关整数余数问题，比如n % 2，如果n为负数，则余数会为-1。为了解决这个问题，一般要引入一个分支，((n % 12) + 12) % 12</p><h3 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bigCalculate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">BigInteger</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> BigInteger.valueOf(<span class="hljs-number">100</span>);<br>    <span class="hljs-type">BigInteger</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> BigInteger.valueOf(<span class="hljs-number">200</span>);<br>    <span class="hljs-type">BigInteger</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a.add(b);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 数组初始化</span><br>    <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    a = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125; <span class="hljs-comment">// error</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2023/03/08/921a766868a3/"/>
    <url>/2023/03/08/921a766868a3/</url>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数无法使用super、arguments和new.target，不能作为构造函数，同时也没有prototype属性</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>参数按照定义初始化，后定义默认值的参数可以引用先定义的参数</p><p>默认参数存在自己的声明式参数作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">x = <span class="hljs-number">1</span>, y = () =&gt; x = <span class="hljs-number">10</span></span>) &#123;<br>    <span class="hljs-title function_">y</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">// 10</span><br>    x = <span class="hljs-string">&#x27;22&#x27;</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">x = <span class="hljs-number">1</span>, y = () =&gt; x = <span class="hljs-number">10</span></span>) &#123;<br>    <span class="hljs-title function_">y</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;22&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/03/08/921a766868a3/default-param.png" alt="默认参数作用域"></p><h3 id="判断函数是否使用new关键字调用"><a href="#判断函数是否使用new关键字调用" class="headerlink" title="判断函数是否使用new关键字调用"></a>判断函数是否使用new关键字调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">King</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;must be instantiated using new&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">King</span>()<br><span class="hljs-title class_">King</span>() <span class="hljs-comment">// Error: King must be instantiated using new</span><br></code></pre></td></tr></table></figure><h3 id="函数属性和方法"><a href="#函数属性和方法" class="headerlink" title="函数属性和方法"></a>函数属性和方法</h3><p>每个函数都存在两个属性：length和prototype。length属性保存函数定义的命名参数的个数</p><p>call()向函数传参时，必须将参数一个个列出来</p><p>apply()向函数传参时，可以传递一个参数数组</p><p>bind()会创建一个新的函数实例，其this值会被绑定到传给bind的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sayName.<span class="hljs-property">length</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArray</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property">of</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArray2</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property">of</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, num1, num2)<br>&#125;<br><span class="hljs-keyword">var</span> color = <span class="hljs-string">&#x27;red&#x27;</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayColor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>)<br>&#125;<br><span class="hljs-keyword">let</span> newSayColor = sayColor.<span class="hljs-title function_">bind</span>(o)<br><span class="hljs-title function_">newSayColor</span>() <span class="hljs-comment">// blue</span><br></code></pre></td></tr></table></figure><h3 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h3><p>函数声明会在代码执行前，进行定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这种方式是错误的</span><br><span class="hljs-keyword">if</span> (condition) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        cosole.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yo&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><ul><li>代码在严格模式下运行</li><li>外部函数的返回值是对尾调用函数的调用</li><li>尾调用函数返回后不需要执行额外的逻辑</li><li>尾调用函数不是引用外部函数作用域中自由变量的闭包</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createComparisonFunction</span>(<span class="hljs-params">propertyName</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">obj1, obj2</span>) &#123;<br>        <span class="hljs-keyword">let</span> value1 = obj1[propertyName]<br>        <span class="hljs-keyword">let</span> value2 = obj2[propertyName]<br>        <span class="hljs-keyword">if</span> (value1 &lt; value2) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value1 &gt; value2) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在执行createComparisonFunction时，会在内部的作用域链上创建两个对象，一个是指向内部的活动对象，一个是指向外部的全局对象，因为返回的匿名函数引用了createComparisonFunction的活动对象，导致在createComparisonFunction执行完后，活动对象并不能直接销毁</p><p><img src="/2023/03/08/921a766868a3/scope.png" alt="作用域链"></p><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name<br>    &#125;<br>    <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ProxyTest</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-title class_">Test</span>, &#123;<br>    <span class="hljs-title function_">construct</span>(<span class="hljs-params">target, args, newTarget</span>) &#123;<br>        <span class="hljs-keyword">const</span> instance = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">construct</span>(...<span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(instance, &#123;<br>            <span class="hljs-title function_">get</span>(<span class="hljs-params">target, prop, receiver</span>) &#123;<br>                <span class="hljs-keyword">if</span> (prop[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;_&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;can not access private field&#x27;</span><br>                &#125;<br>                <span class="hljs-keyword">const</span> val = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(...<span class="hljs-variable language_">arguments</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;function&#x27;</span> ? val.<span class="hljs-title function_">bind</span>(target) : val<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ProxyTest</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理与反射</title>
    <link href="/2023/03/05/9c826a143b54/"/>
    <url>/2023/03/05/9c826a143b54/</url>
    
    <content type="html"><![CDATA[<h2 id="✨代理与反射✨"><a href="#✨代理与反射✨" class="headerlink" title="✨代理与反射✨"></a>✨代理与反射✨</h2><h3 id="代理基础"><a href="#代理基础" class="headerlink" title="代理基础"></a>代理基础</h3><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;target&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, &#123;&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target.<span class="hljs-property">id</span>) <span class="hljs-comment">// target</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">id</span>) <span class="hljs-comment">// target</span><br></code></pre></td></tr></table></figure><h4 id="捕获器"><a href="#捕获器" class="headerlink" title="捕获器"></a>捕获器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> handler = &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, property, receiver</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="可撤销的代理"><a href="#可撤销的代理" class="headerlink" title="可撤销的代理"></a>可撤销的代理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> handler = &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, property, receiver</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;intercepted&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> &#123; proxy, revoke &#125; = <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">revocable</span>(target, handler)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">foo</span>) <span class="hljs-comment">// intercepted</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target.<span class="hljs-property">foo</span>) <span class="hljs-comment">// bar</span><br><span class="hljs-title function_">revoke</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">foo</span>) <span class="hljs-comment">// TypeError</span><br></code></pre></td></tr></table></figure><h4 id="代理的不足"><a href="#代理的不足" class="headerlink" title="代理的不足"></a>代理的不足</h4><ul><li><p>代理中的this</p></li><li><p>代理与内部槽位，比如Date类型，Date类型方法的执行依赖this值上的内部槽位，由于代理对象上不存在内部槽位，导致代理拦截后转发给目标对象的方法抛出TypeError</p></li></ul><h3 id="可代理的方法"><a href="#可代理的方法" class="headerlink" title="可代理的方法"></a>可代理的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;&#125;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, property, receiver</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, property, value, receiver</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">has</span>(<span class="hljs-params">target, property</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">defineProperty</span>(<span class="hljs-params">target, property, descriptor</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineProperty</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">getOwnPropertyDescriptor</span>(<span class="hljs-params">target, property</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target, property</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">ownKeys</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getPrototypeOf</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">setPrototypeOf</span>(<span class="hljs-params">target, prototype</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">setPrototypeOf</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">target, thisArg, ...argumentsList</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">construct</span>(<span class="hljs-params">target, argumentsList, newTarget</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">construct</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul><li><p>跟踪属性的访问</p></li><li><p>隐藏属性</p></li><li><p>属性验证</p></li><li><p>函数与构造函数参数验证</p></li><li><p>数据绑定和可观察对象</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象、类和面向对象编程</title>
    <link href="/2023/02/26/86edf4799d63/"/>
    <url>/2023/02/26/86edf4799d63/</url>
    
    <content type="html"><![CDATA[<h2 id="第八章-对象、类和面向对象编程"><a href="#第八章-对象、类和面向对象编程" class="headerlink" title="第八章 对象、类和面向对象编程"></a>第八章 对象、类和面向对象编程</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h4><h5 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以删除属性，可以修改它的特性</span><br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以通过for-in循环</span><br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以修改属性值</span><br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;test&quot;</span> <span class="hljs-comment">// 属性实际的值</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以删除属性，可以修改它的特性</span><br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以通过for-in循环</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;<br>        xxx<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h5><ul><li><p>如果configurable、enumerable和writable不指定则默认为false</p></li><li><p>set属性如果未定义，则默认是只读的</p></li></ul><h5 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor"></a>Object.getOwnPropertyDescriptor</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> descriptor = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(person, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(descriptor);<br><span class="hljs-comment">/* descriptor = &#123;</span><br><span class="hljs-comment">configurable: true,</span><br><span class="hljs-comment">enumerable: true,</span><br><span class="hljs-comment">get: function()&#123;&#125;,</span><br><span class="hljs-comment">set: undefined</span><br><span class="hljs-comment">&#125; */</span><br></code></pre></td></tr></table></figure><h5 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h5><p>将多个对象的属性进行合并，对于同名的属性，取最后一个值；对于访问器属性，比如获取函数，会作为一个静态值赋给对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> dest, src, result;<br>dest = &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;dest&#x27;</span> &#125;;<br>result = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(dest, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;first&#x27;</span> &#125;, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;second&#x27;</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// &#123; id: &#x27;second&#x27; &#125;</span><br></code></pre></td></tr></table></figure><h5 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h5><p>中括号包围的对象属性键，在运行时会作为JavaScript表达式运行，而不是作为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-keyword">let</span> person = &#123;<br>    [name]: <span class="hljs-string">&#x27;111&#x27;</span>,<br>    [methodKey](name) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h5><p>解构在内部使用函数ToObject()将源数据结构转换为对象，这意味着在对象解构的上下文中，原始值会被当作对象处理。这也意味着null、undefined不能被解构，否则会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; length &#125; = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(length) <span class="hljs-comment">// 4</span><br><span class="hljs-keyword">let</span> &#123; _ &#125; = <span class="hljs-literal">null</span> <span class="hljs-comment">// TypeError</span><br><span class="hljs-keyword">let</span> &#123; _ &#125; = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// TypeError</span><br></code></pre></td></tr></table></figure><p>对于之前声明的变量赋值，赋值表达式必须包含在一对括号中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> personAge;<br>(&#123; <span class="hljs-attr">age</span>: personAge &#125; = &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(personAge) <span class="hljs-comment">// 10</span><br><span class="hljs-keyword">let</span> age;<br>(&#123; age &#125; = &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">100</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><img src="/2023/02/26/86edf4799d63/jsobj_full.jpg" alt="原型链"></p><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span> = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>();<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSubValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span>;<br>&#125;<br><span class="hljs-keyword">let</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-title function_">getSuperValue</span>()) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li><p>实例属性最终变成了原型属性，被所有实例共享</p></li><li><p>子类在实例化时，不能给父类的构造函数传参</p></li></ul><h4 id="盗用构造函数"><a href="#盗用构造函数" class="headerlink" title="盗用构造函数"></a>盗用构造函数</h4><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>无法访问父类原型上的方法，只能将方法定义在构造函数中</li></ul><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><h5 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-comment">// 继承属性</span><br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-comment">// 继承方法</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ul><li>父类的构造方法需要初始化两次</li></ul><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><h5 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><span class="hljs-comment">// 或者使用es6新增的Object.create()</span><br><span class="hljs-keyword">let</span> other = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(o)<br></code></pre></td></tr></table></figure><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><h5 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createAnother</span>(<span class="hljs-params">o</span>) &#123;<br>    <span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(o)<br>    clone.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> clone<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><ul><li>每个对象上都要定义一次方法，不能复用</li></ul><h4 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h4><h5 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-params">subType, superType</span>) &#123;<br>    <span class="hljs-keyword">let</span> prototype = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(superType)<br>    prototype.<span class="hljs-property">constructor</span> = subType<br>    subType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-comment">// 继承属性</span><br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-comment">// 继承方法</span><br><span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-title class_">SubType</span>, <span class="hljs-title class_">SuperType</span>)<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 类声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;&#125;<br><span class="hljs-comment">// 类表达式</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Animal</span> = <span class="hljs-keyword">class</span> &#123;&#125;<br><span class="hljs-comment">// 把类表达式赋值给变量后，不能在类表达式作用域外部访问这个标识符</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonName</span> &#123;<br>&#125;<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// PersonName</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">PersonName</span>) <span class="hljs-comment">// PersonName is not defined</span><br></code></pre></td></tr></table></figure><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>类声明无法被提升</li><li>类受块作用域限制</li></ul><h4 id="类构造函数"><a href="#类构造函数" class="headerlink" title="类构造函数"></a>类构造函数</h4><h5 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h5><ul><li>在内存创建一个新对象</li><li>对象内部的[[Prototype]]指针被赋值给构造函数的prototype属性</li><li>构造函数内部的this被赋值为这个新对象</li><li>执行构造函数的代码</li><li>如果构造函数返回非空对象，则返回该对象，否则，返回刚才新建的对象</li></ul><h4 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Vehicle</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li>super只能在构造方法和静态方法中使用</li><li>不能单独引用super关键字，console.log(super)会抛出错误</li><li>没有定义构造函数时，在实例化子类会调用super()，并且传入所有传给子类的参数</li><li>类构造函数中，不能在调用super()之前调用this</li><li>子类中显示定义了构造函数，则必须在其中调用super()，或者返回一个对象</li></ul><h5 id="类混入"><a href="#类混入" class="headerlink" title="类混入"></a>类混入</h5><p>extends后面是一个JavaScript表达式，任何可以解析为一个类或者构造函数的表达式都是有效的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span> &#123;&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">FooMixin</span> = (<span class="hljs-params">Superclass</span>) =&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Superclass</span> &#123;<br>    <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">BarMixin</span> = (<span class="hljs-params">Superclass</span>) =&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Superclass</span> &#123;<br>    <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">FooMixin</span>(<span class="hljs-title class_">BarMixin</span>(<span class="hljs-title class_">Vehicle</span>)) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>[1] <a href="http://www.mollypages.org/tutorials/js.mp">http://www.mollypages.org/tutorials/js.mp</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迭代器与生成器</title>
    <link href="/2023/02/25/186b36a47d01/"/>
    <url>/2023/02/25/186b36a47d01/</url>
    
    <content type="html"><![CDATA[<h2 id="第七章-迭代器与生成器"><a href="#第七章-迭代器与生成器" class="headerlink" title="第七章 迭代器与生成器"></a>第七章 迭代器与生成器</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h4 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h4><p>迭代器只是使用游标来记录遍历的对象，如果可迭代对象在迭代期间修改了，迭代器也会反映出对应的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>]<br><span class="hljs-keyword">let</span> it = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;baz&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;baz&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: true, value: undefined &#125;</span><br></code></pre></td></tr></table></figure><h4 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h4><p>实现Iterator接口的对象都可以作为迭代器使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">limit</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span> = limit<br>    &#125;<br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>        <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> limit = <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">if</span> (count &lt;= limit) &#123;<br>                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">value</span>: count++ &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span> &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> counter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Counter</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> counter) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 1, 2, 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>提前终止迭代器，自定义终止时需要执行的方法，调用return并不会强制迭代器进入关闭状态，即后面的遍历会接着上次的遍历结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>        <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> limit = <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">if</span> (count &lt;= limit) &#123;<br>                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">value</span>: count++ &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span> &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-keyword">return</span>() &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exit early&#x27;</span>)<br>                <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125; <span class="hljs-comment">// 必须返回有效的IteratorResult对象</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> counter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Counter</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> counter) &#123;<br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// break,continue, return, throw提前退出都会触发</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>&#125; <span class="hljs-comment">// 1, 2, exit early</span><br><br><span class="hljs-comment">// 解构操作未消费所有值时也会触发</span><br><span class="hljs-keyword">let</span> [a, b] = counter<br></code></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><h4 id="基本使用方法-1"><a href="#基本使用方法-1" class="headerlink" title="基本使用方法"></a>基本使用方法</h4><p>在函数名称前加*号，来表示它是一个生成器，生成器也实现了Iterator接口，可以进行for…of迭代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generator</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">let</span> foo = &#123;<br>    * <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用yield中断执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;foo&#x27;</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;bar&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;baz&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> it = <span class="hljs-title function_">generatorFn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: true, value: &#x27;baz&#x27; &#125;</span><br></code></pre></td></tr></table></figure><p>使用yield输入输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;foo&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> it = <span class="hljs-title function_">generatorFn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;bar&#x27;</span>)) <span class="hljs-comment">// &#123; done: true, value: &#x27;bar&#x27; &#125;</span><br><br><span class="hljs-comment">// 使用yield*迭代可迭代对象</span><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span>* [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> x <span class="hljs-keyword">of</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) &#123;<br>        <span class="hljs-keyword">yield</span> x<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生成器作为默认迭代器"><a href="#生成器作为默认迭代器" class="headerlink" title="生成器作为默认迭代器"></a>生成器作为默认迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    &#125;<br>    * [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] &#123;<br>        <span class="hljs-keyword">yield</span>* <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> x <span class="hljs-keyword">of</span> f) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br><span class="hljs-comment">// 1, 2, 3</span><br></code></pre></td></tr></table></figure><h4 id="提前终止生成器"><a href="#提前终止生成器" class="headerlink" title="提前终止生成器"></a>提前终止生成器</h4><h5 id="return"><a href="#return" class="headerlink" title="return()"></a>return()</h5><p>return()方法会强制生成器进入关闭状态，只要进入关闭状态，就无法恢复了，后续调用next()会显示done:true状态，for-of循环等会忽略状态为done:true时的IteratorObject内部返回的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span>* [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-keyword">let</span> g = <span class="hljs-title function_">generatorFn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g) <span class="hljs-comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g.<span class="hljs-keyword">return</span>(<span class="hljs-number">4</span>)) <span class="hljs-comment">// &#123; done: true, value: 4&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g) <span class="hljs-comment">// generatorFn &#123;&lt;close&gt;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="throw"><a href="#throw" class="headerlink" title="throw()"></a>throw()</h5><p>throw()方法会在暂停时将一个错误注入到生成器对象中，如果错位未被处理，则生成器就会关闭，处理了错误，则会跳过那一次执行的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> x <span class="hljs-keyword">of</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">yield</span> x<br>        &#125; <span class="hljs-keyword">catch</span>(e) &#123;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> g = <span class="hljs-title function_">generatorFn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: 1 &#125;</span><br>g.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: 3 &#125;</span><br></code></pre></td></tr></table></figure><h3 id="generator-x2F-yield实现async-x2F-await"><a href="#generator-x2F-yield实现async-x2F-await" class="headerlink" title="generator&#x2F;yield实现async&#x2F;await"></a>generator&#x2F;yield实现async&#x2F;await</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_aync</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fn === <span class="hljs-string">&#x27;function&#x27;</span>) fn = fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>        <span class="hljs-keyword">if</span> (!fn || <span class="hljs-keyword">typeof</span> fn.<span class="hljs-property">next</span> !=== <span class="hljs-string">&#x27;function&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(fn)<br>        <br>        <span class="hljs-title function_">onFullFilled</span>()<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">onFullFilled</span>(<span class="hljs-params">ret</span>) &#123;<br>            <span class="hljs-keyword">let</span> val<br>            <span class="hljs-keyword">try</span> &#123;<br>                val = fn.<span class="hljs-title function_">next</span>(ret)<br>            &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>                <span class="hljs-title function_">reject</span>(e)<br>            &#125;<br>            <span class="hljs-title function_">next</span>(val)<br>        &#125;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">onRejected</span>(<span class="hljs-params">err</span>) &#123;<br>            <span class="hljs-keyword">let</span> val<br>            <span class="hljs-keyword">try</span> &#123;<br>                val = fn.<span class="hljs-keyword">throw</span>(err)<br>            &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>                <span class="hljs-title function_">reject</span>(e)<br>            &#125;<br>            <span class="hljs-title function_">next</span>(val)<br>        &#125;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">ret</span>) &#123;<br>            <span class="hljs-keyword">if</span> (ret.<span class="hljs-property">done</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(ret.<span class="hljs-property">value</span>)<br>            <span class="hljs-keyword">let</span> value = ret.<span class="hljs-property">value</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isPromised</span>(value)) &#123;<br>                value = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(value)<br>            &#125;<br>            <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">then</span>(onFullFilled, onRejected)<br>        &#125;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">isPromised</span>(<span class="hljs-params">obj</span>) &#123;<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj) === <span class="hljs-string">&#x27;[object Promise]&#x27;</span><br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过滤器的使用和应用场景</title>
    <link href="/2023/02/20/dacee11c877b/"/>
    <url>/2023/02/20/dacee11c877b/</url>
    
    <content type="html"><![CDATA[<h2 id="Filter使用方式和场景"><a href="#Filter使用方式和场景" class="headerlink" title="Filter使用方式和场景"></a>Filter使用方式和场景</h2><h3 id="主要接口"><a href="#主要接口" class="headerlink" title="主要接口"></a>主要接口</h3><p>Filter: 开发过滤器需要实现该接口，实现init、doFilter和destroy方法</p><p>FilterCofig: 在过滤器初始化时，传递信息，调用getInitParameter(name)获取参数的值</p><p>FilterChain: 调用过滤器链中的下一个过滤器，如果是最后一个，则调用servlet的service方法</p><h3 id="过滤器的部署"><a href="#过滤器的部署" class="headerlink" title="过滤器的部署"></a>过滤器的部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 或者直接指定servlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- request、include、forward、error --&gt;</span><br>    <span class="hljs-comment">&lt;!--request: 不是requestdispatcher的include和forward时，才触发 --&gt;</span><br>    <span class="hljs-comment">&lt;!--include: requestdispatcher.include调用时，才触发 --&gt;</span><br>    <span class="hljs-comment">&lt;!--forward: requestdispatcher.forward调用时，才触发 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dispatcher</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dispatcher</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        chain.doFilter(request, response);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><h4 id="对请求和响应数据进行替换"><a href="#对请求和响应数据进行替换" class="headerlink" title="对请求和响应数据进行替换"></a>对请求和响应数据进行替换</h4><p>通过继承HttpServletRequestWrapper，定义自己的request，并覆盖其中的方法，来实现需要的逻辑，在chain.doFilter时，传递自定义的Request对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> MyRequestWrapper <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRequestWrapper</span> <span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-built_in">super</span>(request);<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getQueryString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc=123&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">originQueryString</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getQueryString();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != originQueryString) &#123;<br>            originQueryString += <span class="hljs-string">&quot;&amp;&quot;</span> + str;<br>            <span class="hljs-keyword">return</span> originQueryString;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要获取response中的数据，需要自定义response，并且使用ByteArrayOutputStream，让数据写到字节数组中，同时重写HttpServletResponse类的getWriter和getOutputStream方法，返回ByteArrayOutputStream的PrintWriter和ServletOutputStream对象</p><h4 id="其它应用场景"><a href="#其它应用场景" class="headerlink" title="其它应用场景"></a>其它应用场景</h4><p>对用户请求统一认证</p><p>对响应内容压缩，减少传输量</p><p>转换图像格式</p>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合引用类型</title>
    <link href="/2023/02/18/eb7037dd1ee6/"/>
    <url>/2023/02/18/eb7037dd1ee6/</url>
    
    <content type="html"><![CDATA[<h2 id="第六章-集合引用类型"><a href="#第六章-集合引用类型" class="headerlink" title="第六章 集合引用类型"></a>第六章 集合引用类型</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><p>通过new 方法创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>Array.from将可迭代结构或者存在length属性和可索引元素的结构转为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a)<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a, <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-number">2</span>) <span class="hljs-comment">// 第二个参数增强新数组</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a, <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-variable language_">this</span>.<span class="hljs-property">exponent</span>, &#123;<span class="hljs-attr">exponent</span>: <span class="hljs-number">2</span>&#125;) <span class="hljs-comment">// 第三个参数指定this的值</span><br></code></pre></td></tr></table></figure><p>Array.of将一组参数组合为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h3 id="判断是否是数组"><a href="#判断是否是数组" class="headerlink" title="判断是否是数组"></a>判断是否是数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)<br></code></pre></td></tr></table></figure><h3 id="数组迭代器"><a href="#数组迭代器" class="headerlink" title="数组迭代器"></a>数组迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a  = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;baz&quot;</span>)<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">keys</span>()) <span class="hljs-comment">// [0, 1, 2]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">values</span>()) <span class="hljs-comment">// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">entries</span>()) <span class="hljs-comment">// [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;]]</span><br></code></pre></td></tr></table></figure><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>使用Symbol.isConcatSpreadable&#x3D;false，来使concat不会打平数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> alpha = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">const</span> numeric = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> alphaNumeric = alpha.<span class="hljs-title function_">concat</span>(numeric);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alphaNumeric);<br><span class="hljs-comment">// Expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span><br><br>numeric[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] = <span class="hljs-literal">false</span>;<br>alphaNumeric = alpha.<span class="hljs-title function_">concat</span>(numeric);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alphaNumeric);<br><span class="hljs-comment">// Expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, [1, 2, 3]]</span><br></code></pre></td></tr></table></figure><p>slice方法，创建一个包含原数组元素的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">slice</span>(start, end) <span class="hljs-comment">// 参数为负值，则其实际的值为数组长度加上负值</span><br><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>nums.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>) =&gt; nums.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) =&gt; [ <span class="hljs-number">2</span> ]<br></code></pre></td></tr></table></figure><p>splice方法，对原数组进行添加&#x2F;删除元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">splice</span>(start, deleteCount, insertElement)<br><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>nums.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// nums: [3, 4, 5]</span><br>nums.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>) <span class="hljs-comment">// nums: [6, 7, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>every(): 对数组每一项都运行传入的函数，如果每一行函数返回true，则这个方法返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: false</span><br></code></pre></td></tr></table></figure><p>filter(): 对数组每一项运行传入的函数，函数返回为true的项会组成新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: [3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p>map(): 对数组每一项运行传入的函数，返回由每次函数调用结果组成的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item * <span class="hljs-number">2</span>) <span class="hljs-comment">// res: [3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p>some(): 对数组每一项运行传入的函数，如果有一项函数返回true，则这个方法返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: true</span><br></code></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="基础方法"><a href="#基础方法" class="headerlink" title="基础方法"></a>基础方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>],<br>    [<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>],<br>])<br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;key1&quot;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;key1&quot;</span>) <span class="hljs-comment">// value1</span><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>)<br>map.<span class="hljs-title function_">size</span>() <span class="hljs-comment">// 2</span><br>map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;key1&quot;</span>)<br>map.<span class="hljs-title function_">clear</span>()<br><span class="hljs-comment">// 迭代</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> pair <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">entries</span>()) &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">keys</span>()) &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">values</span>()) &#123;&#125;<br>[...map] <span class="hljs-comment">// [[&quot;key1&quot;, &quot;value1&quot;], [&quot;key2&quot;, &quot;value2&quot;]]</span><br></code></pre></td></tr></table></figure><h4 id="Map和Object区别"><a href="#Map和Object区别" class="headerlink" title="Map和Object区别"></a>Map和Object区别</h4><ul><li>内存占用，固定大小内存，Map大约可以比Object多存储50%的键值对</li><li>插入性能，消耗大致相当，不过Map在浏览器中会稍微快一点</li><li>查找速度，当把Object当作数组使用（连续整数作为属性），浏览器会进行优化，查找速度会快一点</li><li>删除性能，使用Map</li></ul><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>弱映射中的键只能是object或者继承object的类型，弱映射不会阻止垃圾回收程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> wm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>()<br><span class="hljs-keyword">const</span> key1 = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">const</span> key2 = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>&#125;<br>wm.<span class="hljs-title function_">has</span>(key1) <span class="hljs-comment">// false</span><br>wm.<span class="hljs-title function_">get</span>(key1) <span class="hljs-comment">// undefined</span><br>wm.<span class="hljs-title function_">set</span>(key1, <span class="hljs-string">&quot;test&quot;</span>)<br>wm.<span class="hljs-title function_">delete</span>(key1)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>会话跟踪</title>
    <link href="/2023/02/18/2124b2337b12/"/>
    <url>/2023/02/18/2124b2337b12/</url>
    
    <content type="html"><![CDATA[<h2 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><p>保存到浏览器内存中，关闭浏览器后，下次访问时，又会创建新的session和sessionId</p><h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><p>保存到硬盘中，通过Cookie.setMaxAge(num),num为正数</p><h4 id="禁用Cookie"><a href="#禁用Cookie" class="headerlink" title="禁用Cookie"></a>禁用Cookie</h4><p>当客户端禁用Cookie后，可以通过URL重写机制来跟踪用户会话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将sessionID作为请求的一部分</span><br>response.encodeURL(path)<br>response.encodeRedirectURL(path)<br></code></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;userinfo&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>cookie.setMaxAge(<span class="hljs-number">1800</span>);<br>response.addCookie(cookie);<br>Cookie[] cookies = request.getCookies();<br></code></pre></td></tr></table></figure><h4 id="配置session默认超时时间"><a href="#配置session默认超时时间" class="headerlink" title="配置session默认超时时间"></a>配置session默认超时时间</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在tomcat中的web.xml配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HttpSessionBindingListener"><a href="#HttpSessionBindingListener" class="headerlink" title="HttpSessionBindingListener"></a>HttpSessionBindingListener</h3><p>当一个对象实现了HttpSessionBindingListener接口，当这个对象被绑定到Session中或者从Session中删除时，Servlet容器会通知这个对象，对象收到通知后，可以做一些其它的操作（在线人数统计）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionBindingListener</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueBound</span><span class="hljs-params">(HttpSessionBindingListener event)</span> &#123;<br>        <span class="hljs-comment">// 添加到Session中时</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueUnbound</span><span class="hljs-params">(HttpSessionBindingListener event)</span> &#123;<br>        <span class="hljs-comment">// 从Session中删除时</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署程序到Tomcat和线程安全的servlet</title>
    <link href="/2023/02/09/5b033c9ea890/"/>
    <url>/2023/02/09/5b033c9ea890/</url>
    
    <content type="html"><![CDATA[<h2 id="Java-Web-基础😀"><a href="#Java-Web-基础😀" class="headerlink" title="Java-Web-基础😀"></a>Java-Web-基础😀</h2><h3 id="部署Java程序到Tomcat"><a href="#部署Java程序到Tomcat" class="headerlink" title="部署Java程序到Tomcat"></a>部署Java程序到Tomcat</h3><h4 id="静态部署🎈"><a href="#静态部署🎈" class="headerlink" title="静态部署🎈"></a>静态部署🎈</h4><p>直接将编译后的项目文件夹或者war包放到webapps中</p><h4 id="动态部署🎈"><a href="#动态部署🎈" class="headerlink" title="动态部署🎈"></a>动态部署🎈</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/test&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;project path&quot;</span> <span class="hljs-attr">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>直接将这插入到server.xml中host节点中</li><li>%tomcat_home%&#x2F;conf&#x2F;enginename&#x2F;hostname&#x2F;，在这创建对应项目名的project-name.xml，并将上面内容拷贝到xml中(⚠️项目的上下文路径将以project-name为准，与Context节点的path无关)</li></ul><h3 id="Servlet请求匹配规则"><a href="#Servlet请求匹配规则" class="headerlink" title="Servlet请求匹配规则"></a>Servlet请求匹配规则</h3><p>采用最长匹配，如果没有找到匹配的则调用容器默认的servlet处理，没有配置默认的servlet，则发送HTTP404消息</p><h3 id="线程安全的Servlet"><a href="#线程安全的Servlet" class="headerlink" title="线程安全的Servlet"></a>线程安全的Servlet</h3><p>默认情况下，servlet是多线程的，即一个servlet实例在多个线程中同时执行，并发地处理多个客户端请求</p><center>多线程的servlet执行模型</center><pre><code class=" mermaid">flowchart LR    subgraph se [servlet容器]        direction LR        sq[调度者线程]--&gt; ci((工作者线程池))        ci--&quot;service()&quot;--&gt; ro1(ServletA的实例)        ci--&quot;service()&quot;--&gt; ro2(ServletB的实例)        ci--&quot;service()&quot;--&gt; ro3(ServletC的实例)    end    客户端请求 --&gt; se</code></pre><h4 id="变量的线程安全"><a href="#变量的线程安全" class="headerlink" title="变量的线程安全"></a>变量的线程安全</h4><p>对于实例变量的访问，需要考虑并发的情况，同时对于connection在close()后，将其设置为null，避免在Connection Closed Exception</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TestServlet <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(req, res)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = ds.getConnection();<br>            conn.close();<br>            conn = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 确保不会关闭两次,避免并发时出现问题</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="属性的线程安全"><a href="#属性的线程安全" class="headerlink" title="属性的线程安全"></a>属性的线程安全</h4><ul><li>ServletContext: 可以被Web应用程序中所有servlet访问，线程不安全</li><li>HttpSession: 同属于一个进程的浏览器窗口，这些窗口的访问请求，属于同一个session，为了处理这些请求，Servlet容器会创建多个线程处理，线程不安全</li><li>ServletRequest: Servlet对于接受到的每一个请求，都会创建一个新的ServletRequest对象，只能一个线程能访问当前的request，线程安全</li></ul><h4 id="RequestDispatcher"><a href="#RequestDispatcher" class="headerlink" title="RequestDispatcher"></a>RequestDispatcher</h4><ul><li>调用servletcontext的getRequestDispatcher方法，传入的路径参数必须以斜杠(&#x2F;)开始，表示相对于上下文的路径</li><li>调用request的getRequestDispatcher方法，传入的路径参数没有以斜杠(&#x2F;)开始，表示相对于当前servlet的路径</li></ul><h5 id="forward和include区别"><a href="#forward和include区别" class="headerlink" title="forward和include区别"></a>forward和include区别</h5><ul><li>forward表示将执行的控制权转交给其它资源处理，其执行后，位于后面的代码不再被执行</li><li>include表示将执行的控制权暂时转交给其它资源处理，同时其它资源作出的响应将并入原先的响应对象，原先的servlet的代码仍可继续执行，可继续输出响应信息</li></ul><h5 id="forward和sendRedirect区别"><a href="#forward和sendRedirect区别" class="headerlink" title="forward和sendRedirect区别"></a>forward和sendRedirect区别</h5><ul><li>forward: 在后台请求另外的资源去处理请求，对于浏览器来说不可见，同时浏览器的地址栏不会改变</li><li>sendRedirect: 将对于其它资源的请求，再次转发给浏览器，由浏览器去请求其它的资源处理，浏览器的地址栏会发生改变</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中的变量提升</title>
    <link href="/2023/02/07/3063711778d7/"/>
    <url>/2023/02/07/3063711778d7/</url>
    
    <content type="html"><![CDATA[<h2 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h2><h3 id="let-and-const-hoisted"><a href="#let-and-const-hoisted" class="headerlink" title="let and const hoisted"></a>let and const hoisted</h3><p>变量的构造大致可以分为3个阶段：创建、初始化和赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fuction <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>x和y的声明过程：</p><ul><li>进入fn，为fn创建一个执行环境</li><li>找到环境中所有var声明的变量，创建变量名</li><li>对这些变量初始化为undefined</li><li>开始执行代码</li><li>将x设置为1，y设置为1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>x和y的声明过程：</p><ul><li>进入fn，为fn创建一个执行环境</li><li>找到环境中所有let声明的变量，创建变量名</li><li>开始执行代码</li><li>将x设置为1，这不是赋值，而是初始化（如果为let x，则将x初始化为undefined）</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>script加载</title>
    <link href="/2023/02/07/77efc5566626/"/>
    <url>/2023/02/07/77efc5566626/</url>
    
    <content type="html"><![CDATA[<h2 id="Script加载"><a href="#Script加载" class="headerlink" title="Script加载"></a>Script加载</h2><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script <span class="hljs-keyword">async</span> src=<span class="hljs-string">&#x27;test.js&#x27;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script defer src=<span class="hljs-string">&#x27;test.js&#x27;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="同步加载"><a href="#同步加载" class="headerlink" title="同步加载"></a>同步加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 设置async为false来实现同步加载</span><br><span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;test.js&#x27;</span><br>script.<span class="hljs-property">async</span> = <span class="hljs-literal">false</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script)<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">difference</th><th align="center">async</th><th align="center">defer</th></tr></thead><tbody><tr><td align="center">block page loading</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">execute by insert order</td><td align="center">no</td><td align="center">yes</td></tr><tr><td align="center">rely on the DOM</td><td align="center">no</td><td align="center">yes</td></tr></tbody></table><p> <img src="https://html.spec.whatwg.org/images/asyncdefer.svg" alt="script"></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>async</strong>下载完后立即执行，适用于要尽可能快的执行脚本</p><p><strong>defer</strong>下载完后也需要等到文档解析完执行，适用于脚本中需要操作DOM</p><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>不会执行，只是下载和缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link rel=<span class="hljs-string">&#x27;preload&#x27;</span> href=<span class="hljs-string">&#x27;test.js&#x27;</span> <span class="hljs-keyword">as</span>=<span class="hljs-string">&#x27;script&#x27;</span> /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&#x27;preload&#x27;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;test.css&#x27;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&#x27;stylesheet&#x27;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>[1] <a href="https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer/">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer/</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
