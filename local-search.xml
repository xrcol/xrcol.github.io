<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>函数</title>
    <link href="/2023/03/08/921a766868a3/"/>
    <url>/2023/03/08/921a766868a3/</url>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数无法使用super、arguments和new.target，不能作为构造函数，同时也没有prototype属性</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>参数按照定义初始化，后定义默认值的参数可以引用先定义的参数</p><p>默认参数存在自己的声明式参数作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">x = <span class="hljs-number">1</span>, y = () =&gt; x = <span class="hljs-number">10</span></span>) &#123;<br>    <span class="hljs-title function_">y</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">// 10</span><br>    x = <span class="hljs-string">&#x27;22&#x27;</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">x = <span class="hljs-number">1</span>, y = () =&gt; x = <span class="hljs-number">10</span></span>) &#123;<br>    <span class="hljs-title function_">y</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x) <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;22&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/03/08/921a766868a3/default-param.png" alt="默认参数作用域"></p><h3 id="判断函数是否使用new关键字调用"><a href="#判断函数是否使用new关键字调用" class="headerlink" title="判断函数是否使用new关键字调用"></a>判断函数是否使用new关键字调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">King</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;must be instantiated using new&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">King</span>()<br><span class="hljs-title class_">King</span>() <span class="hljs-comment">// Error: King must be instantiated using new</span><br></code></pre></td></tr></table></figure><h3 id="函数属性和方法"><a href="#函数属性和方法" class="headerlink" title="函数属性和方法"></a>函数属性和方法</h3><p>每个函数都存在两个属性：length和prototype。length属性保存函数定义的命名参数的个数</p><p>call()向函数传参时，必须将参数一个个列出来</p><p>apply()向函数传参时，可以传递一个参数数组</p><p>bind()会创建一个新的函数实例，其this值会被绑定到传给bind的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sayName.<span class="hljs-property">length</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArray</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property">of</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArray2</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property">of</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, num1, num2)<br>&#125;<br><span class="hljs-keyword">var</span> color = <span class="hljs-string">&#x27;red&#x27;</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayColor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>)<br>&#125;<br><span class="hljs-keyword">let</span> newSayColor = sayColor.<span class="hljs-title function_">bind</span>(o)<br><span class="hljs-title function_">newSayColor</span>() <span class="hljs-comment">// blue</span><br></code></pre></td></tr></table></figure><h3 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h3><p>函数声明会在代码执行前，进行定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这种方式是错误的</span><br><span class="hljs-keyword">if</span> (condition) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        cosole.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;yo&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><ul><li>代码在严格模式下运行</li><li>外部函数的返回值是对尾调用函数的调用</li><li>尾调用函数返回后不需要执行额外的逻辑</li><li>尾调用函数不是引用外部函数作用域中自由变量的闭包</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createComparisonFunction</span>(<span class="hljs-params">propertyName</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">obj1, obj2</span>) &#123;<br>        <span class="hljs-keyword">let</span> value1 = obj1[propertyName]<br>        <span class="hljs-keyword">let</span> value2 = obj2[propertyName]<br>        <span class="hljs-keyword">if</span> (value1 &lt; value2) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value1 &gt; value2) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在执行createComparisonFunction时，会在内部的作用域链上创建两个对象，一个是指向内部的活动对象，一个是指向外部的全局对象，因为返回的匿名函数引用了createComparisonFunction的活动对象，导致在createComparisonFunction执行完后，活动对象并不能直接销毁</p><p><img src="/2023/03/08/921a766868a3/scope.png" alt="作用域链"></p><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name<br>    &#125;<br>    <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ProxyTest</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-title class_">Test</span>, &#123;<br>    <span class="hljs-title function_">construct</span>(<span class="hljs-params">target, args, newTarget</span>) &#123;<br>        <span class="hljs-keyword">const</span> instance = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">construct</span>(...<span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(instance, &#123;<br>            <span class="hljs-title function_">get</span>(<span class="hljs-params">target, prop, receiver</span>) &#123;<br>                <span class="hljs-keyword">if</span> (prop[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;_&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;can not access private field&#x27;</span><br>                &#125;<br>                <span class="hljs-keyword">const</span> val = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(...<span class="hljs-variable language_">arguments</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;function&#x27;</span> ? val.<span class="hljs-title function_">bind</span>(target) : val<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ProxyTest</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理与反射</title>
    <link href="/2023/03/05/9c826a143b54/"/>
    <url>/2023/03/05/9c826a143b54/</url>
    
    <content type="html"><![CDATA[<h2 id="✨代理与反射✨"><a href="#✨代理与反射✨" class="headerlink" title="✨代理与反射✨"></a>✨代理与反射✨</h2><h3 id="代理基础"><a href="#代理基础" class="headerlink" title="代理基础"></a>代理基础</h3><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;target&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, &#123;&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target.<span class="hljs-property">id</span>) <span class="hljs-comment">// target</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">id</span>) <span class="hljs-comment">// target</span><br></code></pre></td></tr></table></figure><h4 id="捕获器"><a href="#捕获器" class="headerlink" title="捕获器"></a>捕获器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> handler = &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, property, receiver</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="可撤销的代理"><a href="#可撤销的代理" class="headerlink" title="可撤销的代理"></a>可撤销的代理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> handler = &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, property, receiver</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;intercepted&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> &#123; proxy, revoke &#125; = <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">revocable</span>(target, handler)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">foo</span>) <span class="hljs-comment">// intercepted</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target.<span class="hljs-property">foo</span>) <span class="hljs-comment">// bar</span><br><span class="hljs-title function_">revoke</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">foo</span>) <span class="hljs-comment">// TypeError</span><br></code></pre></td></tr></table></figure><h4 id="代理的不足"><a href="#代理的不足" class="headerlink" title="代理的不足"></a>代理的不足</h4><ul><li><p>代理中的this</p></li><li><p>代理与内部槽位，比如Date类型，Date类型方法的执行依赖this值上的内部槽位，由于代理对象上不存在内部槽位，导致代理拦截后转发给目标对象的方法抛出TypeError</p></li></ul><h3 id="可代理的方法"><a href="#可代理的方法" class="headerlink" title="可代理的方法"></a>可代理的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;&#125;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, property, receiver</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, property, value, receiver</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">has</span>(<span class="hljs-params">target, property</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">defineProperty</span>(<span class="hljs-params">target, property, descriptor</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineProperty</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">getOwnPropertyDescriptor</span>(<span class="hljs-params">target, property</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target, property</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">ownKeys</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getPrototypeOf</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">setPrototypeOf</span>(<span class="hljs-params">target, prototype</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">setPrototypeOf</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">target, thisArg, ...argumentsList</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;,<br>    <span class="hljs-title function_">construct</span>(<span class="hljs-params">target, argumentsList, newTarget</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">construct</span>(...<span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul><li><p>跟踪属性的访问</p></li><li><p>隐藏属性</p></li><li><p>属性验证</p></li><li><p>函数与构造函数参数验证</p></li><li><p>数据绑定和可观察对象</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象、类和面向对象编程</title>
    <link href="/2023/02/26/86edf4799d63/"/>
    <url>/2023/02/26/86edf4799d63/</url>
    
    <content type="html"><![CDATA[<h2 id="第八章-对象、类和面向对象编程"><a href="#第八章-对象、类和面向对象编程" class="headerlink" title="第八章 对象、类和面向对象编程"></a>第八章 对象、类和面向对象编程</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h4><h5 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以删除属性，可以修改它的特性</span><br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以通过for-in循环</span><br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以修改属性值</span><br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;test&quot;</span> <span class="hljs-comment">// 属性实际的值</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以删除属性，可以修改它的特性</span><br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以通过for-in循环</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;<br>        xxx<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h5><ul><li><p>如果configurable、enumerable和writable不指定则默认为false</p></li><li><p>set属性如果未定义，则默认是只读的</p></li></ul><h5 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor"></a>Object.getOwnPropertyDescriptor</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> descriptor = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(person, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(descriptor);<br><span class="hljs-comment">/* descriptor = &#123;</span><br><span class="hljs-comment">configurable: true,</span><br><span class="hljs-comment">enumerable: true,</span><br><span class="hljs-comment">get: function()&#123;&#125;,</span><br><span class="hljs-comment">set: undefined</span><br><span class="hljs-comment">&#125; */</span><br></code></pre></td></tr></table></figure><h5 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h5><p>将多个对象的属性进行合并，对于同名的属性，取最后一个值；对于访问器属性，比如获取函数，会作为一个静态值赋给对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> dest, src, result;<br>dest = &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;dest&#x27;</span> &#125;;<br>result = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(dest, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;first&#x27;</span> &#125;, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;second&#x27;</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// &#123; id: &#x27;second&#x27; &#125;</span><br></code></pre></td></tr></table></figure><h5 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h5><p>中括号包围的对象属性键，在运行时会作为JavaScript表达式运行，而不是作为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-keyword">let</span> person = &#123;<br>    [name]: <span class="hljs-string">&#x27;111&#x27;</span>,<br>    [methodKey](name) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h5><p>解构在内部使用函数ToObject()将源数据结构转换为对象，这意味着在对象解构的上下文中，原始值会被当作对象处理。这也意味着null、undefined不能被解构，否则会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; length &#125; = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(length) <span class="hljs-comment">// 4</span><br><span class="hljs-keyword">let</span> &#123; _ &#125; = <span class="hljs-literal">null</span> <span class="hljs-comment">// TypeError</span><br><span class="hljs-keyword">let</span> &#123; _ &#125; = <span class="hljs-literal">undefined</span> <span class="hljs-comment">// TypeError</span><br></code></pre></td></tr></table></figure><p>对于之前声明的变量赋值，赋值表达式必须包含在一对括号中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> personAge;<br>(&#123; <span class="hljs-attr">age</span>: personAge &#125; = &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(personAge) <span class="hljs-comment">// 10</span><br><span class="hljs-keyword">let</span> age;<br>(&#123; age &#125; = &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">100</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><img src="/2023/02/26/86edf4799d63/jsobj_full.jpg" alt="原型链"></p><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span> = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>();<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSubValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span>;<br>&#125;<br><span class="hljs-keyword">let</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-title function_">getSuperValue</span>()) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li><p>实例属性最终变成了原型属性，被所有实例共享</p></li><li><p>子类在实例化时，不能给父类的构造函数传参</p></li></ul><h4 id="盗用构造函数"><a href="#盗用构造函数" class="headerlink" title="盗用构造函数"></a>盗用构造函数</h4><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>无法访问父类原型上的方法，只能将方法定义在构造函数中</li></ul><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><h5 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-comment">// 继承属性</span><br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-comment">// 继承方法</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ul><li>父类的构造方法需要初始化两次</li></ul><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><h5 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><span class="hljs-comment">// 或者使用es6新增的Object.create()</span><br><span class="hljs-keyword">let</span> other = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(o)<br></code></pre></td></tr></table></figure><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><h5 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createAnother</span>(<span class="hljs-params">o</span>) &#123;<br>    <span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(o)<br>    clone.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> clone<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><ul><li>每个对象上都要定义一次方法，不能复用</li></ul><h4 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h4><h5 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-params">subType, superType</span>) &#123;<br>    <span class="hljs-keyword">let</span> prototype = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(superType)<br>    prototype.<span class="hljs-property">constructor</span> = subType<br>    subType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-comment">// 继承属性</span><br>    <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-comment">// 继承方法</span><br><span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-title class_">SubType</span>, <span class="hljs-title class_">SuperType</span>)<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 类声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;&#125;<br><span class="hljs-comment">// 类表达式</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Animal</span> = <span class="hljs-keyword">class</span> &#123;&#125;<br><span class="hljs-comment">// 把类表达式赋值给变量后，不能在类表达式作用域外部访问这个标识符</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonName</span> &#123;<br>&#125;<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// PersonName</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">PersonName</span>) <span class="hljs-comment">// PersonName is not defined</span><br></code></pre></td></tr></table></figure><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>类声明无法被提升</li><li>类受块作用域限制</li></ul><h4 id="类构造函数"><a href="#类构造函数" class="headerlink" title="类构造函数"></a>类构造函数</h4><h5 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h5><ul><li>在内存创建一个新对象</li><li>对象内部的[[Prototype]]指针被赋值给构造函数的prototype属性</li><li>构造函数内部的this被赋值为这个新对象</li><li>执行构造函数的代码</li><li>如果构造函数返回非空对象，则返回该对象，否则，返回刚才新建的对象</li></ul><h4 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Vehicle</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li>super只能在构造方法和静态方法中使用</li><li>不能单独引用super关键字，console.log(super)会抛出错误</li><li>没有定义构造函数时，在实例化子类会调用super()，并且传入所有传给子类的参数</li><li>类构造函数中，不能在调用super()之前调用this</li><li>子类中显示定义了构造函数，则必须在其中调用super()，或者返回一个对象</li></ul><h5 id="类混入"><a href="#类混入" class="headerlink" title="类混入"></a>类混入</h5><p>extends后面是一个JavaScript表达式，任何可以解析为一个类或者构造函数的表达式都是有效的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span> &#123;&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">FooMixin</span> = (<span class="hljs-params">Superclass</span>) =&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Superclass</span> &#123;<br>    <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">BarMixin</span> = (<span class="hljs-params">Superclass</span>) =&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Superclass</span> &#123;<br>    <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">FooMixin</span>(<span class="hljs-title class_">BarMixin</span>(<span class="hljs-title class_">Vehicle</span>)) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>[1] <a href="http://www.mollypages.org/tutorials/js.mp">http://www.mollypages.org/tutorials/js.mp</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迭代器与生成器</title>
    <link href="/2023/02/25/186b36a47d01/"/>
    <url>/2023/02/25/186b36a47d01/</url>
    
    <content type="html"><![CDATA[<h2 id="第七章-迭代器与生成器"><a href="#第七章-迭代器与生成器" class="headerlink" title="第七章 迭代器与生成器"></a>第七章 迭代器与生成器</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h4 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h4><p>迭代器只是使用游标来记录遍历的对象，如果可迭代对象在迭代期间修改了，迭代器也会反映出对应的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>]<br><span class="hljs-keyword">let</span> it = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;baz&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;baz&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: true, value: undefined &#125;</span><br></code></pre></td></tr></table></figure><h4 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h4><p>实现Iterator接口的对象都可以作为迭代器使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">limit</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span> = limit<br>    &#125;<br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>        <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> limit = <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">if</span> (count &lt;= limit) &#123;<br>                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">value</span>: count++ &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span> &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> counter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Counter</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> counter) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 1, 2, 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>提前终止迭代器，自定义终止时需要执行的方法，调用return并不会强制迭代器进入关闭状态，即后面的遍历会接着上次的遍历结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>        <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">let</span> limit = <span class="hljs-variable language_">this</span>.<span class="hljs-property">limit</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">if</span> (count &lt;= limit) &#123;<br>                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">value</span>: count++ &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span> &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-keyword">return</span>() &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exit early&#x27;</span>)<br>                <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125; <span class="hljs-comment">// 必须返回有效的IteratorResult对象</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> counter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Counter</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> counter) &#123;<br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// break,continue, return, throw提前退出都会触发</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>&#125; <span class="hljs-comment">// 1, 2, exit early</span><br><br><span class="hljs-comment">// 解构操作未消费所有值时也会触发</span><br><span class="hljs-keyword">let</span> [a, b] = counter<br></code></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><h4 id="基本使用方法-1"><a href="#基本使用方法-1" class="headerlink" title="基本使用方法"></a>基本使用方法</h4><p>在函数名称前加*号，来表示它是一个生成器，生成器也实现了Iterator接口，可以进行for…of迭代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generator</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">let</span> foo = &#123;<br>    * <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用yield中断执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;foo&#x27;</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;bar&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;baz&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> it = <span class="hljs-title function_">generatorFn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: true, value: &#x27;baz&#x27; &#125;</span><br></code></pre></td></tr></table></figure><p>使用yield输入输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;foo&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> it = <span class="hljs-title function_">generatorFn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;bar&#x27;</span>)) <span class="hljs-comment">// &#123; done: true, value: &#x27;bar&#x27; &#125;</span><br><br><span class="hljs-comment">// 使用yield*迭代可迭代对象</span><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span>* [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> x <span class="hljs-keyword">of</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) &#123;<br>        <span class="hljs-keyword">yield</span> x<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生成器作为默认迭代器"><a href="#生成器作为默认迭代器" class="headerlink" title="生成器作为默认迭代器"></a>生成器作为默认迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    &#125;<br>    * [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] &#123;<br>        <span class="hljs-keyword">yield</span>* <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> x <span class="hljs-keyword">of</span> f) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br><span class="hljs-comment">// 1, 2, 3</span><br></code></pre></td></tr></table></figure><h4 id="提前终止生成器"><a href="#提前终止生成器" class="headerlink" title="提前终止生成器"></a>提前终止生成器</h4><h5 id="return"><a href="#return" class="headerlink" title="return()"></a>return()</h5><p>return()方法会强制生成器进入关闭状态，只要进入关闭状态，就无法恢复了，后续调用next()会显示done:true状态，for-of循环等会忽略状态为done:true时的IteratorObject内部返回的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span>* [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-keyword">let</span> g = <span class="hljs-title function_">generatorFn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g) <span class="hljs-comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g.<span class="hljs-keyword">return</span>(<span class="hljs-number">4</span>)) <span class="hljs-comment">// &#123; done: true, value: 4&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g) <span class="hljs-comment">// generatorFn &#123;&lt;close&gt;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="throw"><a href="#throw" class="headerlink" title="throw()"></a>throw()</h5><p>throw()方法会在暂停时将一个错误注入到生成器对象中，如果错位未被处理，则生成器就会关闭，处理了错误，则会跳过那一次执行的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> x <span class="hljs-keyword">of</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">yield</span> x<br>        &#125; <span class="hljs-keyword">catch</span>(e) &#123;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> g = <span class="hljs-title function_">generatorFn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: 1 &#125;</span><br>g.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123; done: false, value: 3 &#125;</span><br></code></pre></td></tr></table></figure><h3 id="generator-x2F-yield实现async-x2F-await"><a href="#generator-x2F-yield实现async-x2F-await" class="headerlink" title="generator&#x2F;yield实现async&#x2F;await"></a>generator&#x2F;yield实现async&#x2F;await</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_aync</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> fn === <span class="hljs-string">&#x27;function&#x27;</span>) fn = fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>        <span class="hljs-keyword">if</span> (!fn || <span class="hljs-keyword">typeof</span> fn.<span class="hljs-property">next</span> !=== <span class="hljs-string">&#x27;function&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(fn)<br>        <br>        <span class="hljs-title function_">onFullFilled</span>()<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">onFullFilled</span>(<span class="hljs-params">ret</span>) &#123;<br>            <span class="hljs-keyword">let</span> val<br>            <span class="hljs-keyword">try</span> &#123;<br>                val = fn.<span class="hljs-title function_">next</span>(ret)<br>            &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>                <span class="hljs-title function_">reject</span>(e)<br>            &#125;<br>            <span class="hljs-title function_">next</span>(val)<br>        &#125;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">onRejected</span>(<span class="hljs-params">err</span>) &#123;<br>            <span class="hljs-keyword">let</span> val<br>            <span class="hljs-keyword">try</span> &#123;<br>                val = fn.<span class="hljs-keyword">throw</span>(err)<br>            &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>                <span class="hljs-title function_">reject</span>(e)<br>            &#125;<br>            <span class="hljs-title function_">next</span>(val)<br>        &#125;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">ret</span>) &#123;<br>            <span class="hljs-keyword">if</span> (ret.<span class="hljs-property">done</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(ret.<span class="hljs-property">value</span>)<br>            <span class="hljs-keyword">let</span> value = ret.<span class="hljs-property">value</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isPromised</span>(value)) &#123;<br>                value = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(value)<br>            &#125;<br>            <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">then</span>(onFullFilled, onRejected)<br>        &#125;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">isPromised</span>(<span class="hljs-params">obj</span>) &#123;<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj) === <span class="hljs-string">&#x27;[object Promise]&#x27;</span><br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过滤器的使用和应用场景</title>
    <link href="/2023/02/20/dacee11c877b/"/>
    <url>/2023/02/20/dacee11c877b/</url>
    
    <content type="html"><![CDATA[<h2 id="Filter使用方式和场景"><a href="#Filter使用方式和场景" class="headerlink" title="Filter使用方式和场景"></a>Filter使用方式和场景</h2><h3 id="主要接口"><a href="#主要接口" class="headerlink" title="主要接口"></a>主要接口</h3><p>Filter: 开发过滤器需要实现该接口，实现init、doFilter和destroy方法</p><p>FilterCofig: 在过滤器初始化时，传递信息，调用getInitParameter(name)获取参数的值</p><p>FilterChain: 调用过滤器链中的下一个过滤器，如果是最后一个，则调用servlet的service方法</p><h3 id="过滤器的部署"><a href="#过滤器的部署" class="headerlink" title="过滤器的部署"></a>过滤器的部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 或者直接指定servlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- request、include、forward、error --&gt;</span><br>    <span class="hljs-comment">&lt;!--request: 不是requestdispatcher的include和forward时，才触发 --&gt;</span><br>    <span class="hljs-comment">&lt;!--include: requestdispatcher.include调用时，才触发 --&gt;</span><br>    <span class="hljs-comment">&lt;!--forward: requestdispatcher.forward调用时，才触发 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dispatcher</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dispatcher</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        chain.doFilter(request, response);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><h4 id="对请求和响应数据进行替换"><a href="#对请求和响应数据进行替换" class="headerlink" title="对请求和响应数据进行替换"></a>对请求和响应数据进行替换</h4><p>通过继承HttpServletRequestWrapper，定义自己的request，并覆盖其中的方法，来实现需要的逻辑，在chain.doFilter时，传递自定义的Request对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> MyRequestWrapper <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRequestWrapper</span> <span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-built_in">super</span>(request);<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getQueryString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc=123&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">originQueryString</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getQueryString();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != originQueryString) &#123;<br>            originQueryString += <span class="hljs-string">&quot;&amp;&quot;</span> + str;<br>            <span class="hljs-keyword">return</span> originQueryString;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要获取response中的数据，需要自定义response，并且使用ByteArrayOutputStream，让数据写到字节数组中，同时重写HttpServletResponse类的getWriter和getOutputStream方法，返回ByteArrayOutputStream的PrintWriter和ServletOutputStream对象</p><h4 id="其它应用场景"><a href="#其它应用场景" class="headerlink" title="其它应用场景"></a>其它应用场景</h4><p>对用户请求统一认证</p><p>对响应内容压缩，减少传输量</p><p>转换图像格式</p>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合引用类型</title>
    <link href="/2023/02/18/eb7037dd1ee6/"/>
    <url>/2023/02/18/eb7037dd1ee6/</url>
    
    <content type="html"><![CDATA[<h2 id="第六章-集合引用类型"><a href="#第六章-集合引用类型" class="headerlink" title="第六章 集合引用类型"></a>第六章 集合引用类型</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><p>通过new 方法创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>Array.from将可迭代结构或者存在length属性和可索引元素的结构转为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a)<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a, <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-number">2</span>) <span class="hljs-comment">// 第二个参数增强新数组</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a, <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * <span class="hljs-variable language_">this</span>.<span class="hljs-property">exponent</span>, &#123;<span class="hljs-attr">exponent</span>: <span class="hljs-number">2</span>&#125;) <span class="hljs-comment">// 第三个参数指定this的值</span><br></code></pre></td></tr></table></figure><p>Array.of将一组参数组合为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h3 id="判断是否是数组"><a href="#判断是否是数组" class="headerlink" title="判断是否是数组"></a>判断是否是数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)<br></code></pre></td></tr></table></figure><h3 id="数组迭代器"><a href="#数组迭代器" class="headerlink" title="数组迭代器"></a>数组迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a  = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;baz&quot;</span>)<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">keys</span>()) <span class="hljs-comment">// [0, 1, 2]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">values</span>()) <span class="hljs-comment">// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">entries</span>()) <span class="hljs-comment">// [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;]]</span><br></code></pre></td></tr></table></figure><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>使用Symbol.isConcatSpreadable&#x3D;false，来使concat不会打平数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> alpha = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">const</span> numeric = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> alphaNumeric = alpha.<span class="hljs-title function_">concat</span>(numeric);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alphaNumeric);<br><span class="hljs-comment">// Expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span><br><br>numeric[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] = <span class="hljs-literal">false</span>;<br>alphaNumeric = alpha.<span class="hljs-title function_">concat</span>(numeric);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alphaNumeric);<br><span class="hljs-comment">// Expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, [1, 2, 3]]</span><br></code></pre></td></tr></table></figure><p>slice方法，创建一个包含原数组元素的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">slice</span>(start, end) <span class="hljs-comment">// 参数为负值，则其实际的值为数组长度加上负值</span><br><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>nums.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>) =&gt; nums.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) =&gt; [ <span class="hljs-number">2</span> ]<br></code></pre></td></tr></table></figure><p>splice方法，对原数组进行添加&#x2F;删除元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">splice</span>(start, deleteCount, insertElement)<br><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>nums.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// nums: [3, 4, 5]</span><br>nums.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>) <span class="hljs-comment">// nums: [6, 7, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>every(): 对数组每一项都运行传入的函数，如果每一行函数返回true，则这个方法返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: false</span><br></code></pre></td></tr></table></figure><p>filter(): 对数组每一项运行传入的函数，函数返回为true的项会组成新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: [3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p>map(): 对数组每一项运行传入的函数，返回由每次函数调用结果组成的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item * <span class="hljs-number">2</span>) <span class="hljs-comment">// res: [3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p>some(): 对数组每一项运行传入的函数，如果有一项函数返回true，则这个方法返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">const</span> res = nums.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>) <span class="hljs-comment">// res: true</span><br></code></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="基础方法"><a href="#基础方法" class="headerlink" title="基础方法"></a>基础方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>],<br>    [<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>],<br>])<br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;key1&quot;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;key1&quot;</span>) <span class="hljs-comment">// value1</span><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>)<br>map.<span class="hljs-title function_">size</span>() <span class="hljs-comment">// 2</span><br>map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;key1&quot;</span>)<br>map.<span class="hljs-title function_">clear</span>()<br><span class="hljs-comment">// 迭代</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> pair <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">entries</span>()) &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">keys</span>()) &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">values</span>()) &#123;&#125;<br>[...map] <span class="hljs-comment">// [[&quot;key1&quot;, &quot;value1&quot;], [&quot;key2&quot;, &quot;value2&quot;]]</span><br></code></pre></td></tr></table></figure><h4 id="Map和Object区别"><a href="#Map和Object区别" class="headerlink" title="Map和Object区别"></a>Map和Object区别</h4><ul><li>内存占用，固定大小内存，Map大约可以比Object多存储50%的键值对</li><li>插入性能，消耗大致相当，不过Map在浏览器中会稍微快一点</li><li>查找速度，当把Object当作数组使用（连续整数作为属性），浏览器会进行优化，查找速度会快一点</li><li>删除性能，使用Map</li></ul><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>弱映射中的键只能是object或者继承object的类型，弱映射不会阻止垃圾回收程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> wm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>()<br><span class="hljs-keyword">const</span> key1 = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">const</span> key2 = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>&#125;<br>wm.<span class="hljs-title function_">has</span>(key1) <span class="hljs-comment">// false</span><br>wm.<span class="hljs-title function_">get</span>(key1) <span class="hljs-comment">// undefined</span><br>wm.<span class="hljs-title function_">set</span>(key1, <span class="hljs-string">&quot;test&quot;</span>)<br>wm.<span class="hljs-title function_">delete</span>(key1)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>会话跟踪</title>
    <link href="/2023/02/18/2124b2337b12/"/>
    <url>/2023/02/18/2124b2337b12/</url>
    
    <content type="html"><![CDATA[<h2 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><p>保存到浏览器内存中，关闭浏览器后，下次访问时，又会创建新的session和sessionId</p><h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><p>保存到硬盘中，通过Cookie.setMaxAge(num),num为正数</p><h4 id="禁用Cookie"><a href="#禁用Cookie" class="headerlink" title="禁用Cookie"></a>禁用Cookie</h4><p>当客户端禁用Cookie后，可以通过URL重写机制来跟踪用户会话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将sessionID作为请求的一部分</span><br>response.encodeURL(path)<br>response.encodeRedirectURL(path)<br></code></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;userinfo&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>cookie.setMaxAge(<span class="hljs-number">1800</span>);<br>response.addCookie(cookie);<br>Cookie[] cookies = request.getCookies();<br></code></pre></td></tr></table></figure><h4 id="配置session默认超时时间"><a href="#配置session默认超时时间" class="headerlink" title="配置session默认超时时间"></a>配置session默认超时时间</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在tomcat中的web.xml配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HttpSessionBindingListener"><a href="#HttpSessionBindingListener" class="headerlink" title="HttpSessionBindingListener"></a>HttpSessionBindingListener</h3><p>当一个对象实现了HttpSessionBindingListener接口，当这个对象被绑定到Session中或者从Session中删除时，Servlet容器会通知这个对象，对象收到通知后，可以做一些其它的操作（在线人数统计）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionBindingListener</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueBound</span><span class="hljs-params">(HttpSessionBindingListener event)</span> &#123;<br>        <span class="hljs-comment">// 添加到Session中时</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueUnbound</span><span class="hljs-params">(HttpSessionBindingListener event)</span> &#123;<br>        <span class="hljs-comment">// 从Session中删除时</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署程序到Tomcat和线程安全的servlet</title>
    <link href="/2023/02/09/5b033c9ea890/"/>
    <url>/2023/02/09/5b033c9ea890/</url>
    
    <content type="html"><![CDATA[<h2 id="Java-Web-基础😀"><a href="#Java-Web-基础😀" class="headerlink" title="Java-Web-基础😀"></a>Java-Web-基础😀</h2><h3 id="部署Java程序到Tomcat"><a href="#部署Java程序到Tomcat" class="headerlink" title="部署Java程序到Tomcat"></a>部署Java程序到Tomcat</h3><h4 id="静态部署🎈"><a href="#静态部署🎈" class="headerlink" title="静态部署🎈"></a>静态部署🎈</h4><p>直接将编译后的项目文件夹或者war包放到webapps中</p><h4 id="动态部署🎈"><a href="#动态部署🎈" class="headerlink" title="动态部署🎈"></a>动态部署🎈</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/test&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;project path&quot;</span> <span class="hljs-attr">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>直接将这插入到server.xml中host节点中</li><li>%tomcat_home%&#x2F;conf&#x2F;enginename&#x2F;hostname&#x2F;，在这创建对应项目名的project-name.xml，并将上面内容拷贝到xml中(⚠️项目的上下文路径将以project-name为准，与Context节点的path无关)</li></ul><h3 id="Servlet请求匹配规则"><a href="#Servlet请求匹配规则" class="headerlink" title="Servlet请求匹配规则"></a>Servlet请求匹配规则</h3><p>采用最长匹配，如果没有找到匹配的则调用容器默认的servlet处理，没有配置默认的servlet，则发送HTTP404消息</p><h3 id="线程安全的Servlet"><a href="#线程安全的Servlet" class="headerlink" title="线程安全的Servlet"></a>线程安全的Servlet</h3><p>默认情况下，servlet是多线程的，即一个servlet实例在多个线程中同时执行，并发地处理多个客户端请求</p><center>多线程的servlet执行模型</center><pre><code class=" mermaid">flowchart LR    subgraph se [servlet容器]        direction LR        sq[调度者线程]--&gt; ci((工作者线程池))        ci--&quot;service()&quot;--&gt; ro1(ServletA的实例)        ci--&quot;service()&quot;--&gt; ro2(ServletB的实例)        ci--&quot;service()&quot;--&gt; ro3(ServletC的实例)    end    客户端请求 --&gt; se</code></pre><h4 id="变量的线程安全"><a href="#变量的线程安全" class="headerlink" title="变量的线程安全"></a>变量的线程安全</h4><p>对于实例变量的访问，需要考虑并发的情况，同时对于connection在close()后，将其设置为null，避免在Connection Closed Exception</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TestServlet <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(req, res)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = ds.getConnection();<br>            conn.close();<br>            conn = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 确保不会关闭两次,避免并发时出现问题</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="属性的线程安全"><a href="#属性的线程安全" class="headerlink" title="属性的线程安全"></a>属性的线程安全</h4><ul><li>ServletContext: 可以被Web应用程序中所有servlet访问，线程不安全</li><li>HttpSession: 同属于一个进程的浏览器窗口，这些窗口的访问请求，属于同一个session，为了处理这些请求，Servlet容器会创建多个线程处理，线程不安全</li><li>ServletRequest: Servlet对于接受到的每一个请求，都会创建一个新的ServletRequest对象，只能一个线程能访问当前的request，线程安全</li></ul><h4 id="RequestDispatcher"><a href="#RequestDispatcher" class="headerlink" title="RequestDispatcher"></a>RequestDispatcher</h4><ul><li>调用servletcontext的getRequestDispatcher方法，传入的路径参数必须以斜杠(&#x2F;)开始，表示相对于上下文的路径</li><li>调用request的getRequestDispatcher方法，传入的路径参数没有以斜杠(&#x2F;)开始，表示相对于当前servlet的路径</li></ul><h5 id="forward和include区别"><a href="#forward和include区别" class="headerlink" title="forward和include区别"></a>forward和include区别</h5><ul><li>forward表示将执行的控制权转交给其它资源处理，其执行后，位于后面的代码不再被执行</li><li>include表示将执行的控制权暂时转交给其它资源处理，同时其它资源作出的响应将并入原先的响应对象，原先的servlet的代码仍可继续执行，可继续输出响应信息</li></ul><h5 id="forward和sendRedirect区别"><a href="#forward和sendRedirect区别" class="headerlink" title="forward和sendRedirect区别"></a>forward和sendRedirect区别</h5><ul><li>forward: 在后台请求另外的资源去处理请求，对于浏览器来说不可见，同时浏览器的地址栏不会改变</li><li>sendRedirect: 将对于其它资源的请求，再次转发给浏览器，由浏览器去请求其它的资源处理，浏览器的地址栏会发生改变</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java-Web-开发详解阅读笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中的变量提升</title>
    <link href="/2023/02/07/3063711778d7/"/>
    <url>/2023/02/07/3063711778d7/</url>
    
    <content type="html"><![CDATA[<h2 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h2><h3 id="let-and-const-hoisted"><a href="#let-and-const-hoisted" class="headerlink" title="let and const hoisted"></a>let and const hoisted</h3><p>变量的构造大致可以分为3个阶段：创建、初始化和赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fuction <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>x和y的声明过程：</p><ul><li>进入fn，为fn创建一个执行环境</li><li>找到环境中所有var声明的变量，创建变量名</li><li>对这些变量初始化为undefined</li><li>开始执行代码</li><li>将x设置为1，y设置为1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>x和y的声明过程：</p><ul><li>进入fn，为fn创建一个执行环境</li><li>找到环境中所有let声明的变量，创建变量名</li><li>开始执行代码</li><li>将x设置为1，这不是赋值，而是初始化（如果为let x，则将x初始化为undefined）</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>script加载</title>
    <link href="/2023/02/07/77efc5566626/"/>
    <url>/2023/02/07/77efc5566626/</url>
    
    <content type="html"><![CDATA[<h2 id="Script加载"><a href="#Script加载" class="headerlink" title="Script加载"></a>Script加载</h2><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script <span class="hljs-keyword">async</span> src=<span class="hljs-string">&#x27;test.js&#x27;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script defer src=<span class="hljs-string">&#x27;test.js&#x27;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="同步加载"><a href="#同步加载" class="headerlink" title="同步加载"></a>同步加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 设置async为false来实现同步加载</span><br><span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;test.js&#x27;</span><br>script.<span class="hljs-property">async</span> = <span class="hljs-literal">false</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script)<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">difference</th><th align="center">async</th><th align="center">defer</th></tr></thead><tbody><tr><td align="center">block page loading</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">execute by insert order</td><td align="center">no</td><td align="center">yes</td></tr><tr><td align="center">rely on the DOM</td><td align="center">no</td><td align="center">yes</td></tr></tbody></table><p> <img src="https://html.spec.whatwg.org/images/asyncdefer.svg" alt="script"></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>async</strong>下载完后立即执行，适用于要尽可能快的执行脚本</p><p><strong>defer</strong>下载完后也需要等到文档解析完执行，适用于脚本中需要操作DOM</p><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>不会执行，只是下载和缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;link rel=<span class="hljs-string">&#x27;preload&#x27;</span> href=<span class="hljs-string">&#x27;test.js&#x27;</span> <span class="hljs-keyword">as</span>=<span class="hljs-string">&#x27;script&#x27;</span> /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&#x27;preload&#x27;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;test.css&#x27;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&#x27;stylesheet&#x27;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>[1] <a href="https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer/">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer/</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript高级程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
